/**

Generated by the following Solidity interface...
```solidity
interface KmsManagement {
    error ActivateKeyKmsNodeAlreadyResponded(uint256 keyId);
    error ActivateKeyRequestAlreadySent(uint256 keyId);
    error ActivateKeyRequiresKeygen(uint256 keyId);
    error ActivateKeyRequiresKskgen(uint256 currentKeyId, uint256 keyId);
    error AddressEmptyCode(address target);
    error CrsgenKmsNodeAlreadyResponded(uint256 crsId);
    error ERC1967InvalidImplementation(address implementation);
    error ERC1967NonPayable();
    error FailedCall();
    error FheParamsAlreadyInitialized(string fheParamsName);
    error FheParamsNotInitialized();
    error InvalidInitialization();
    error KeygenKmsNodeAlreadyResponded(uint256 keyId);
    error KeygenPreprocessingRequired(uint256 preKeyId);
    error KeygenRequestAlreadySent(uint256 preKeyId);
    error KskgenDestKeyNotGenerated(uint256 destKeyId);
    error KskgenKmsNodeAlreadyResponded(uint256 kskId);
    error KskgenPreprocessingRequired(uint256 preKskId);
    error KskgenRequestAlreadySent(uint256 preKskId);
    error KskgenSameSrcAndDestKeyIds(uint256 keyId);
    error KskgenSourceKeyNotGenerated(uint256 sourceKeyId);
    error NotInitializing();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error PreprocessKeygenKmsNodeAlreadyResponded(uint256 preKeyId);
    error PreprocessKskgenKmsNodeAlreadyResponded(uint256 preKskId);
    error UUPSUnauthorizedCallContext();
    error UUPSUnsupportedProxiableUUID(bytes32 slot);

    event ActivateKeyRequest(uint256 keyId);
    event ActivateKeyResponse(uint256 keyId);
    event AddFheParams(string fheParamsName, bytes32 fheParamsDigest);
    event CrsgenRequest(uint256 crsgenRequestId, bytes32 fheParamsDigest);
    event CrsgenResponse(uint256 crsgenRequestId, uint256 crsId, bytes32 fheParamsDigest);
    event Initialized(uint64 version);
    event KeygenRequest(uint256 preKeyId, bytes32 fheParamsDigest);
    event KeygenResponse(uint256 preKeyId, uint256 keygenId, bytes32 fheParamsDigest);
    event KskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId, bytes32 fheParamsDigest);
    event KskgenResponse(uint256 preKskId, uint256 kskId, bytes32 fheParamsDigest);
    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event PreprocessKeygenRequest(uint256 preKeyRequestId, bytes32 fheParamsDigest);
    event PreprocessKeygenResponse(uint256 preKeyRequestId, uint256 preKeyId);
    event PreprocessKskgenRequest(uint256 preKskRequestId, bytes32 fheParamsDigest);
    event PreprocessKskgenResponse(uint256 preKskRequestId, uint256 preKskId);
    event UpdateFheParams(string fheParamsName, bytes32 fheParamsDigest);
    event Upgraded(address indexed implementation);

    constructor();

    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
    function acceptOwnership() external;
    function activateKeyRequest(uint256 keyId) external;
    function activateKeyResponse(uint256 keyId) external;
    function activatedKeyIds(uint256 index) external view returns (uint256);
    function addFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
    function crsFheParamsDigests(uint256 crsId) external view returns (bytes32);
    function crsgenRequest(string memory fheParamsName) external;
    function crsgenResponse(uint256 crsgenRequestId, uint256 crsId) external;
    function fheParamsDigests(string memory fheParamsName) external view returns (bytes32);
    function getCurrentKeyId() external view returns (uint256);
    function getVersion() external pure returns (string memory);
    function initialize(string memory fheParamsName, bytes32 fheParamsDigest) external;
    function isCurrentKeyId(uint256 keyId) external view returns (bool);
    function keyFheParamsDigests(uint256 keyId) external view returns (bytes32);
    function keygenRequest(uint256 preKeyId) external;
    function keygenResponse(uint256 preKeyId, uint256 keyId) external;
    function kskFheParamsDigests(uint256 kskId) external view returns (bytes32);
    function kskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId) external;
    function kskgenResponse(uint256 preKskId, uint256 kskId) external;
    function owner() external view returns (address);
    function pendingOwner() external view returns (address);
    function preprocessKeygenRequest(string memory fheParamsName) external;
    function preprocessKeygenResponse(uint256 preKeygenRequestId, uint256 preKeyId) external;
    function preprocessKskgenRequest(string memory fheParamsName) external;
    function preprocessKskgenResponse(uint256 preKskgenRequestId, uint256 preKskId) external;
    function proxiableUUID() external view returns (bytes32);
    function renounceOwnership() external;
    function transferOwnership(address newOwner) external;
    function updateFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "UPGRADE_INTERFACE_VERSION",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "acceptOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "activateKeyRequest",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "activateKeyResponse",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "activatedKeyIds",
    "inputs": [
      {
        "name": "index",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "crsFheParamsDigests",
    "inputs": [
      {
        "name": "crsId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "crsgenRequest",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "crsgenResponse",
    "inputs": [
      {
        "name": "crsgenRequestId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "crsId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "fheParamsDigests",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getCurrentKeyId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "initialize",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isCurrentKeyId",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "keyFheParamsDigests",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "keygenRequest",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "keygenResponse",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "kskFheParamsDigests",
    "inputs": [
      {
        "name": "kskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "kskgenRequest",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "sourceKeyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "destKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "kskgenResponse",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "kskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pendingOwner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "preprocessKeygenRequest",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "preprocessKeygenResponse",
    "inputs": [
      {
        "name": "preKeygenRequestId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "preprocessKskgenRequest",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "preprocessKskgenResponse",
    "inputs": [
      {
        "name": "preKskgenRequestId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "proxiableUUID",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "upgradeToAndCall",
    "inputs": [
      {
        "name": "newImplementation",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "event",
    "name": "ActivateKeyRequest",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ActivateKeyResponse",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "AddFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrsgenRequest",
    "inputs": [
      {
        "name": "crsgenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "CrsgenResponse",
    "inputs": [
      {
        "name": "crsgenRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "crsId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Initialized",
    "inputs": [
      {
        "name": "version",
        "type": "uint64",
        "indexed": false,
        "internalType": "uint64"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeygenRequest",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KeygenResponse",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "keygenId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KskgenRequest",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "sourceKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "destKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "KskgenResponse",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "kskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferStarted",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKeygenRequest",
    "inputs": [
      {
        "name": "preKeyRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKeygenResponse",
    "inputs": [
      {
        "name": "preKeyRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "preKeyId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKskgenRequest",
    "inputs": [
      {
        "name": "preKskRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "PreprocessKskgenResponse",
    "inputs": [
      {
        "name": "preKskRequestId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "preKskId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "UpdateFheParams",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "fheParamsDigest",
        "type": "bytes32",
        "indexed": false,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Upgraded",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ActivateKeyKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ActivateKeyRequestAlreadySent",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ActivateKeyRequiresKeygen",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ActivateKeyRequiresKskgen",
    "inputs": [
      {
        "name": "currentKeyId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "AddressEmptyCode",
    "inputs": [
      {
        "name": "target",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "CrsgenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "crsId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967InvalidImplementation",
    "inputs": [
      {
        "name": "implementation",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1967NonPayable",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FailedCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FheParamsAlreadyInitialized",
    "inputs": [
      {
        "name": "fheParamsName",
        "type": "string",
        "internalType": "string"
      }
    ]
  },
  {
    "type": "error",
    "name": "FheParamsNotInitialized",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidInitialization",
    "inputs": []
  },
  {
    "type": "error",
    "name": "KeygenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KeygenPreprocessingRequired",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KeygenRequestAlreadySent",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenDestKeyNotGenerated",
    "inputs": [
      {
        "name": "destKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "kskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenPreprocessingRequired",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenRequestAlreadySent",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenSameSrcAndDestKeyIds",
    "inputs": [
      {
        "name": "keyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "KskgenSourceKeyNotGenerated",
    "inputs": [
      {
        "name": "sourceKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "NotInitializing",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "PreprocessKeygenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "preKeyId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "PreprocessKskgenKmsNodeAlreadyResponded",
    "inputs": [
      {
        "name": "preKskId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "UUPSUnauthorizedCallContext",
    "inputs": []
  },
  {
    "type": "error",
    "name": "UUPSUnsupportedProxiableUUID",
    "inputs": [
      {
        "name": "slot",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod KmsManagement {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f5ffd5b5061005161005660201b60201c565b6101b6565b5f61006561015460201b60201c565b9050805f0160089054906101000a900460ff16156100af576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101515767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051610148919061019d565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b6101978161017b565b82525050565b5f6020820190506101b05f83018461018e565b92915050565b608051613e6c6101dc5f395f81816129cd01528181612a220152612bdc0152613e6c5ff3fe6080604052600436106101d7575f3560e01c80638af77f0311610101578063ad3cb1cc11610094578063eed01e7d11610063578063eed01e7d1461063f578063f1244c5d1461067b578063f2fde38b146106b7578063faac73b4146106df576101d7565b8063ad3cb1cc14610599578063d8909eab146105c3578063e0e55fd7146105ed578063e30c397814610615576101d7565b80639594a901116100d05780639594a901146104e55780639e167f761461050d5780639f8ec91c14610535578063a7ab444014610571576101d7565b80638af77f031461042f5780638b4f7b3b1461046b5780638da5cb5b14610493578063941c8df6146104bd576101d7565b806345e3b193116101795780636532745f116101485780636532745f146103b35780636aafa976146103db578063715018a61461040357806379ba509714610419576101d7565b806345e3b193146102f55780634f1ef2861461033157806352d1902d1461034d578063622c078f14610377576101d7565b8063394c7bd6116101b5578063394c7bd6146102555780633b41a6dd1461027d57806340c24f15146102a5578063428e76d8146102cd576101d7565b80630d8e6e2c146101db57806326739e7c14610205578063293479b11461022d575b5f5ffd5b3480156101e6575f5ffd5b506101ef610707565b6040516101fc91906133c6565b60405180910390f35b348015610210575f5ffd5b5061022b60048036038101906102269190613458565b610782565b005b348015610238575f5ffd5b50610253600480360381019061024e91906134d6565b6108a8565b005b348015610260575f5ffd5b5061027b60048036038101906102769190613566565b610997565b005b348015610288575f5ffd5b506102a3600480360381019061029e91906135b6565b610c24565b005b3480156102b0575f5ffd5b506102cb60048036038101906102c691906135e1565b610e71565b005b3480156102d8575f5ffd5b506102f360048036038101906102ee9190613458565b611106565b005b348015610300575f5ffd5b5061031b60048036038101906103169190613458565b61122c565b604051610328919061362e565b60405180910390f35b61034b600480360381019061034691906137c9565b611263565b005b348015610358575f5ffd5b50610361611282565b60405161036e919061362e565b60405180910390f35b348015610382575f5ffd5b5061039d600480360381019061039891906135b6565b6112b3565b6040516103aa9190613832565b60405180910390f35b3480156103be575f5ffd5b506103d960048036038101906103d49190613458565b6112e6565b005b3480156103e6575f5ffd5b5061040160048036038101906103fc91906135e1565b61140c565b005b34801561040e575f5ffd5b506104176116a1565b005b348015610424575f5ffd5b5061042d6116b4565b005b34801561043a575f5ffd5b50610455600480360381019061045091906135b6565b611742565b604051610462919061362e565b60405180910390f35b348015610476575f5ffd5b50610491600480360381019061048c91906138e9565b61176a565b005b34801561049e575f5ffd5b506104a7611909565b6040516104b49190613952565b60405180910390f35b3480156104c8575f5ffd5b506104e360048036038101906104de91906135e1565b61193e565b005b3480156104f0575f5ffd5b5061050b600480360381019061050691906135e1565b611bcb565b005b348015610518575f5ffd5b50610533600480360381019061052e91906135b6565b611ead565b005b348015610540575f5ffd5b5061055b600480360381019061055691906135b6565b612082565b6040516105689190613985565b60405180910390f35b34801561057c575f5ffd5b50610597600480360381019061059291906134d6565b61209d565b005b3480156105a4575f5ffd5b506105ad6121c4565b6040516105ba91906133c6565b60405180910390f35b3480156105ce575f5ffd5b506105d76121fd565b6040516105e49190613832565b60405180910390f35b3480156105f8575f5ffd5b50610613600480360381019061060e91906135b6565b612214565b005b348015610620575f5ffd5b50610629612365565b6040516106369190613952565b60405180910390f35b34801561064a575f5ffd5b50610665600480360381019061066091906135b6565b61239a565b604051610672919061362e565b60405180910390f35b348015610686575f5ffd5b506106a1600480360381019061069c91906135b6565b6123c2565b6040516106ae919061362e565b60405180910390f35b3480156106c2575f5ffd5b506106dd60048036038101906106d8919061399e565b6123ea565b005b3480156106ea575f5ffd5b50610705600480360381019061070091906135e1565b6124a3565b005b60606040518060400160405280600d81526020017f4b6d734d616e6167656d656e74000000000000000000000000000000000000008152506107485f612731565b6107526001612731565b61075b5f612731565b60405160200161076e9493929190613a97565b604051602081830303815290604052905090565b61078a6127fb565b81815f610795612882565b90508060250183836040516107ab929190613b19565b90815260200160405180910390205f9054906101000a900460ff166107fc576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610805612882565b9050806001015f81548092919061081b90613b5e565b91905055505f816001015490505f825f01888860405161083c929190613b19565b908152602001604051809103902054905080836021015f8481526020019081526020015f20819055507f8511337ad89c20ef904f13e9b9e7eb05f4c0fff128a8760c2c1d436c111b309f8282604051610896929190613ba5565b60405180910390a15050505050505050565b6108b06127fb565b82825f6108bb612882565b90508060250183836040516108d1929190613b19565b90815260200160405180910390205f9054906101000a900460ff16610922576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61092b612882565b905084815f018888604051610941929190613b19565b9081526020016040518091039020819055507ff0bb05ed11b11e9a83db1fdfdb364ce1579b1bb34d4080b670b5794692079e3d87878760405161098693929190613bf8565b60405180910390a150505050505050565b61099f6127fb565b5f6109a8612882565b905080600d015f8581526020019081526020015f205f9054906101000a900460ff1615610a0c57836040517f49cbbf34000000000000000000000000000000000000000000000000000000008152600401610a039190613832565b60405180910390fd5b80600b015f8581526020019081526020015f205f9054906101000a900460ff16610a6d57836040517fbe48e7d0000000000000000000000000000000000000000000000000000000008152600401610a649190613832565b60405180910390fd5b818303610ab157826040517fd6f4a687000000000000000000000000000000000000000000000000000000008152600401610aa89190613832565b60405180910390fd5b806008015f8481526020019081526020015f205f9054906101000a900460ff16610b1257826040517f05fc6161000000000000000000000000000000000000000000000000000000008152600401610b099190613832565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff16610b7357816040517f2800229d000000000000000000000000000000000000000000000000000000008152600401610b6a9190613832565b60405180910390fd5b8281600e015f8681526020019081526020015f20819055508181600f015f8681526020019081526020015f2081905550600181600d015f8681526020019081526020015f205f6101000a81548160ff0219169083151502179055507ffd6857403eadbdc0c8b68b151bb46a31d6c352af79b065d472cbd77781514dd4848484846022015f8981526020019081526020015f2054604051610c169493929190613c28565b60405180910390a150505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663cb661755336040518263ffffffff1660e01b8152600401610c719190613952565b5f6040518083038186803b158015610c87575f5ffd5b505afa158015610c99573d5f5f3e3d5ffd5b505050505f610ca6612882565b9050806019015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610d4557816040517fc3e638e6000000000000000000000000000000000000000000000000000000008152600401610d3c9190613832565b60405180910390fd5b6001816019015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080601a015f8381526020019081526020015f205f815480929190610dce90613b5e565b91905055508181601b015414158015610dff5750610dfe81601a015f8481526020019081526020015f20546128a9565b5b15610e6d5780601c0182908060018154018082558091505060019003905f5260205f20015f90919091909150558181601b01819055507f7066963379f0648a6475860de4447aec0b04c03db5bc169b401c88d16ff6578d82604051610e649190613832565b60405180910390a15b5050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401610ebe9190613952565b5f6040518083038186803b158015610ed4575f5ffd5b505afa158015610ee6573d5f5f3e3d5ffd5b505050505f610ef3612882565b9050806016015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610f9257816040517fe87c607c000000000000000000000000000000000000000000000000000000008152600401610f899190613832565b60405180910390fd5b6001816016015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806015015f8481526020019081526020015f205f81548092919061101b90613b5e565b9190505550806017015f8381526020019081526020015f205f9054906101000a900460ff161580156110655750611064816015015f8581526020019081526020015f205461293a565b5b15611101576001816017015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816024015f8581526020019081526020015f205490508082601f015f8581526020019081526020015f20819055507f95c123ae3e63573231605272667e1410a9e3c618227ff509e3c6a152c664b3a28484836040516110f793929190613c6b565b60405180910390a1505b505050565b61110e6127fb565b81815f611119612882565b905080602501838360405161112f929190613b19565b90815260200160405180910390205f9054906101000a900460ff16611180576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611189612882565b9050806009015f81548092919061119f90613b5e565b91905055505f816009015490505f825f0188886040516111c0929190613b19565b908152602001604051809103902054905080836023015f8481526020019081526020015f20819055507f596d111e7512a47ee0c5eb66eef6f22c45d8ad4fee0520340785a11e221ed512828260405161121a929190613ba5565b60405180910390a15050505050505050565b5f5f611236612882565b9050805f01848460405161124b929190613b19565b90815260200160405180910390205491505092915050565b61126b6129cb565b61127482612ab1565b61127e8282612abc565b5050565b5f61128b612bda565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f5f6112bd612882565b905080601c0183815481106112d5576112d4613ca0565b5b905f5260205f200154915050919050565b6112ee6127fb565b81815f6112f9612882565b905080602501838360405161130f929190613b19565b90815260200160405180910390205f9054906101000a900460ff16611360576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611369612882565b9050806014015f81548092919061137f90613b5e565b91905055505f816014015490505f825f0188886040516113a0929190613b19565b908152602001604051809103902054905080836024015f8481526020019081526020015f20819055507f04f7b6ae222ef47289cfdc7c3b8298273e1bc92eeb346e805163ed4b37e76b2982826040516113fa929190613ba5565b60405180910390a15050505050505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016114599190613952565b5f6040518083038186803b15801561146f575f5ffd5b505afa158015611481573d5f5f3e3d5ffd5b505050505f61148e612882565b9050806006015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161561152d57816040517f0300a3a90000000000000000000000000000000000000000000000000000000081526004016115249190613832565b60405180910390fd5b6001816006015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f8381526020019081526020015f205f8154809291906115b690613b5e565b9190505550806008015f8381526020019081526020015f205f9054906101000a900460ff1615801561160057506115ff816007015f8481526020019081526020015f205461293a565b5b1561169c576001816008015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816020015f8581526020019081526020015f205490508082601d015f8581526020019081526020015f20819055507fbc9d79366dad6b972d61e3f1567ee2f1e24c0ce10c72dcfb1452ee3b35c8d13e84848360405161169293929190613c6b565b60405180910390a1505b505050565b6116a96127fb565b6116b25f612c61565b565b5f6116bd612c9e565b90508073ffffffffffffffffffffffffffffffffffffffff166116de612365565b73ffffffffffffffffffffffffffffffffffffffff161461173657806040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161172d9190613952565b60405180910390fd5b61173f81612c61565b50565b5f5f61174c612882565b905080601d015f8481526020019081526020015f2054915050919050565b60025f611775612ca5565b9050805f0160089054906101000a900460ff16806117bd57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b156117f4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff021916908315150217905550611849611844611909565b612ccc565b5f611852612882565b905083815f01866040516118669190613ccd565b9081526020016040518091039020819055506001816025018660405161188c9190613ccd565b90815260200160405180910390205f6101000a81548160ff021916908315150217905550505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2826040516118fb9190613d05565b60405180910390a150505050565b5f5f611913612ce0565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b815260040161198b9190613952565b5f6040518083038186803b1580156119a1575f5ffd5b505afa1580156119b3573d5f5f3e3d5ffd5b505050505f6119c0612882565b905080600c015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611a5e57816040517e391dd6000000000000000000000000000000000000000000000000000000008152600401611a559190613832565b60405180910390fd5b600181600c015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080600a015f8481526020019081526020015f205f815480929190611ae790613b5e565b919050555080600b015f8381526020019081526020015f205f9054906101000a900460ff16158015611b315750611b3081600a015f8581526020019081526020015f205461293a565b5b15611bc657600181600b015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806023015f8481526020019081526020015f2054816022015f8481526020019081526020015f20819055507f76863545735c29cf1c7ebb0028e734d1d738d2a5d099ba8b529c1793354ae3128383604051611bbd929190613d1e565b60405180910390a15b505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401611c189190613952565b5f6040518083038186803b158015611c2e575f5ffd5b505afa158015611c40573d5f5f3e3d5ffd5b505050505f611c4d612882565b9050806010015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611cec57816040517fcfa5f2bb000000000000000000000000000000000000000000000000000000008152600401611ce39190613832565b60405180910390fd5b6001816010015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806011015f8381526020019081526020015f205f815480929190611d7590613b5e565b9190505550806012015f8381526020019081526020015f205f9054906101000a900460ff16158015611dbf5750611dbe816011015f8481526020019081526020015f205461293a565b5b15611ea8576001816012015f8481526020019081526020015f205f6101000a81548160ff02191690831515021790555081816013015f83600e015f8781526020019081526020015f205481526020019081526020015f205f83600f015f8781526020019081526020015f205481526020019081526020015f20819055505f816022015f8581526020019081526020015f205490508082601e015f8581526020019081526020015f20819055507fc607d1695840ce0dc9d24a547edaec485e01e5939a540c2e4c23e360e2243767848483604051611e9e93929190613c6b565b60405180910390a1505b505050565b611eb56127fb565b5f611ebe612882565b9050806018015f8381526020019081526020015f205f9054906101000a900460ff1615611f2257816040517f23bd4fd3000000000000000000000000000000000000000000000000000000008152600401611f199190613832565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff16611f8357816040517fe3b34609000000000000000000000000000000000000000000000000000000008152600401611f7a9190613832565b60405180910390fd5b5f81601b01541461201c57806012015f826013015f84601b015481526020019081526020015f205f8581526020019081526020015f205481526020019081526020015f205f9054906101000a900460ff1661201b5780601b0154826040517fe854ac28000000000000000000000000000000000000000000000000000000008152600401612012929190613d1e565b60405180910390fd5b5b6001816018015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507fbddc1662cdaa871ae40d9edc0e435e0988c6095bfc7c452aedb16c89606b6b75826040516120769190613832565b60405180910390a15050565b5f5f61208c612882565b905080601b01548314915050919050565b6120a56127fb565b5f6120ae612882565b90508060250184846040516120c4929190613b19565b90815260200160405180910390205f9054906101000a900460ff16156121235783836040517fbcdf999300000000000000000000000000000000000000000000000000000000815260040161211a929190613d45565b60405180910390fd5b81815f018585604051612137929190613b19565b908152602001604051809103902081905550600181602501858560405161215f929190613b19565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507fe63dba14ba216c43efbd6e0206cd2172a4a64f894c8faf004691aa6f88fecada8484846040516121b693929190613bf8565b60405180910390a150505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f5f612207612882565b905080601b015491505090565b61221c6127fb565b5f612225612882565b9050806005015f8381526020019081526020015f205f9054906101000a900460ff161561228957816040517f5bf84e110000000000000000000000000000000000000000000000000000000081526004016122809190613832565b60405180910390fd5b806003015f8381526020019081526020015f205f9054906101000a900460ff166122ea57816040517fbea1ca4c0000000000000000000000000000000000000000000000000000000081526004016122e19190613832565b60405180910390fd5b6001816005015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507f796482d60009a80331529afb48bf3415a16c9ff539a8cd138e77a745af6c7b7882826020015f8581526020019081526020015f2054604051612359929190613ba5565b60405180910390a15050565b5f5f61236f612d07565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b5f5f6123a4612882565b905080601f015f8481526020019081526020015f2054915050919050565b5f5f6123cc612882565b905080601e015f8481526020019081526020015f2054915050919050565b6123f26127fb565b5f6123fb612d07565b905081815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1661245d611909565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016124f09190613952565b5f6040518083038186803b158015612506575f5ffd5b505afa158015612518573d5f5f3e3d5ffd5b505050505f612525612882565b9050806004015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156125c457816040517f609e5a300000000000000000000000000000000000000000000000000000000081526004016125bb9190613832565b60405180910390fd5b6001816004015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806002015f8481526020019081526020015f205f81548092919061264d90613b5e565b9190505550806003015f8381526020019081526020015f205f9054906101000a900460ff161580156126975750612696816002015f8581526020019081526020015f205461293a565b5b1561272c576001816003015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806021015f8481526020019081526020015f2054816020015f8481526020019081526020015f20819055507f4187011e59171694872e08b3d3cdd3c901567aa0e38aaa6dbb4368837c1e8e348383604051612723929190613d1e565b60405180910390a15b505050565b60605f600161273f84612d2e565b0190505f8167ffffffffffffffff81111561275d5761275c6136a5565b5b6040519080825280601f01601f19166020018201604052801561278f5781602001600182028036833780820191505090505b5090505f82602001820190505b6001156127f0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816127e5576127e4613d67565b5b0494505f850361279c575b819350505050919050565b612803612c9e565b73ffffffffffffffffffffffffffffffffffffffff16612821611909565b73ffffffffffffffffffffffffffffffffffffffff161461288057612844612c9e565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016128779190613952565b60405180910390fd5b565b5f7fa48b77331ab977c487fc73c0afbe86f1a3a130c068453f497d376ab9fac7e000905090565b5f5f73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16636799ef526040518163ffffffff1660e01b8152600401602060405180830381865afa158015612908573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061292c9190613da8565b905080831015915050919050565b5f5f73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff166347cd4b3e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612999573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129bd9190613da8565b905080831015915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480612a7857507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612a5f612e7f565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612aaf576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612ab96127fb565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612b2457506040513d601f19601f82011682018060405250810190612b219190613de7565b60015b612b6557816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612b5c9190613952565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b8114612bcb57806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401612bc2919061362e565b60405180910390fd5b612bd58383612ed2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612c5f576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f612c6a612d07565b9050805f015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055612c9a82612f44565b5050565b5f33905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612cd4613015565b612cdd81613055565b50565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b5f5f5f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612d8a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612d8057612d7f613d67565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612dc7576d04ee2d6d415b85acef81000000008381612dbd57612dbc613d67565b5b0492506020810190505b662386f26fc100008310612df657662386f26fc100008381612dec57612deb613d67565b5b0492506010810190505b6305f5e1008310612e1f576305f5e1008381612e1557612e14613d67565b5b0492506008810190505b6127108310612e44576127108381612e3a57612e39613d67565b5b0492506004810190505b60648310612e675760648381612e5d57612e5c613d67565b5b0492506002810190505b600a8310612e76576001810190505b80915050919050565b5f612eab7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6130d9565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612edb826130e2565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115612f3757612f3182826131ab565b50612f40565b612f3f61322b565b5b5050565b5f612f4d612ce0565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b61301d613267565b613053576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61305d613015565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036130cd575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016130c49190613952565b60405180910390fd5b6130d681612c61565b50565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b0361313d57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016131349190613952565b60405180910390fd5b806131697f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6130d9565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff16846040516131d49190613e56565b5f60405180830381855af49150503d805f811461320c576040519150601f19603f3d011682016040523d82523d5f602084013e613211565b606091505b5091509150613221858383613285565b9250505092915050565b5f341115613265576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f613270612ca5565b5f0160089054906101000a900460ff16905090565b60608261329a5761329582613312565b61330a565b5f82511480156132c057505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561330257836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016132f99190613952565b60405180910390fd5b81905061330b565b5b9392505050565b5f815111156133245780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61339882613356565b6133a28185613360565b93506133b2818560208601613370565b6133bb8161337e565b840191505092915050565b5f6020820190508181035f8301526133de818461338e565b905092915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112613418576134176133f7565b5b8235905067ffffffffffffffff811115613435576134346133fb565b5b602083019150836001820283011115613451576134506133ff565b5b9250929050565b5f5f6020838503121561346e5761346d6133ef565b5b5f83013567ffffffffffffffff81111561348b5761348a6133f3565b5b61349785828601613403565b92509250509250929050565b5f819050919050565b6134b5816134a3565b81146134bf575f5ffd5b50565b5f813590506134d0816134ac565b92915050565b5f5f5f604084860312156134ed576134ec6133ef565b5b5f84013567ffffffffffffffff81111561350a576135096133f3565b5b61351686828701613403565b93509350506020613529868287016134c2565b9150509250925092565b5f819050919050565b61354581613533565b811461354f575f5ffd5b50565b5f813590506135608161353c565b92915050565b5f5f5f6060848603121561357d5761357c6133ef565b5b5f61358a86828701613552565b935050602061359b86828701613552565b92505060406135ac86828701613552565b9150509250925092565b5f602082840312156135cb576135ca6133ef565b5b5f6135d884828501613552565b91505092915050565b5f5f604083850312156135f7576135f66133ef565b5b5f61360485828601613552565b925050602061361585828601613552565b9150509250929050565b613628816134a3565b82525050565b5f6020820190506136415f83018461361f565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61367082613647565b9050919050565b61368081613666565b811461368a575f5ffd5b50565b5f8135905061369b81613677565b92915050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6136db8261337e565b810181811067ffffffffffffffff821117156136fa576136f96136a5565b5b80604052505050565b5f61370c6133e6565b905061371882826136d2565b919050565b5f67ffffffffffffffff821115613737576137366136a5565b5b6137408261337e565b9050602081019050919050565b828183375f83830152505050565b5f61376d6137688461371d565b613703565b905082815260208101848484011115613789576137886136a1565b5b61379484828561374d565b509392505050565b5f82601f8301126137b0576137af6133f7565b5b81356137c084826020860161375b565b91505092915050565b5f5f604083850312156137df576137de6133ef565b5b5f6137ec8582860161368d565b925050602083013567ffffffffffffffff81111561380d5761380c6133f3565b5b6138198582860161379c565b9150509250929050565b61382c81613533565b82525050565b5f6020820190506138455f830184613823565b92915050565b5f67ffffffffffffffff821115613865576138646136a5565b5b61386e8261337e565b9050602081019050919050565b5f61388d6138888461384b565b613703565b9050828152602081018484840111156138a9576138a86136a1565b5b6138b484828561374d565b509392505050565b5f82601f8301126138d0576138cf6133f7565b5b81356138e084826020860161387b565b91505092915050565b5f5f604083850312156138ff576138fe6133ef565b5b5f83013567ffffffffffffffff81111561391c5761391b6133f3565b5b613928858286016138bc565b9250506020613939858286016134c2565b9150509250929050565b61394c81613666565b82525050565b5f6020820190506139655f830184613943565b92915050565b5f8115159050919050565b61397f8161396b565b82525050565b5f6020820190506139985f830184613976565b92915050565b5f602082840312156139b3576139b26133ef565b5b5f6139c08482850161368d565b91505092915050565b5f81905092915050565b5f6139dd82613356565b6139e781856139c9565b93506139f7818560208601613370565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f613a376002836139c9565b9150613a4282613a03565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f613a816001836139c9565b9150613a8c82613a4d565b600182019050919050565b5f613aa282876139d3565b9150613aad82613a2b565b9150613ab982866139d3565b9150613ac482613a75565b9150613ad082856139d3565b9150613adb82613a75565b9150613ae782846139d3565b915081905095945050505050565b5f613b0083856139c9565b9350613b0d83858461374d565b82840190509392505050565b5f613b25828486613af5565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613b6882613533565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b9a57613b99613b31565b5b600182019050919050565b5f604082019050613bb85f830185613823565b613bc5602083018461361f565b9392505050565b5f613bd78385613360565b9350613be483858461374d565b613bed8361337e565b840190509392505050565b5f6040820190508181035f830152613c11818587613bcc565b9050613c20602083018461361f565b949350505050565b5f608082019050613c3b5f830187613823565b613c486020830186613823565b613c556040830185613823565b613c62606083018461361f565b95945050505050565b5f606082019050613c7e5f830186613823565b613c8b6020830185613823565b613c98604083018461361f565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f613cd882846139d3565b915081905092915050565b5f67ffffffffffffffff82169050919050565b613cff81613ce3565b82525050565b5f602082019050613d185f830184613cf6565b92915050565b5f604082019050613d315f830185613823565b613d3e6020830184613823565b9392505050565b5f6020820190508181035f830152613d5e818486613bcc565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f81519050613da28161353c565b92915050565b5f60208284031215613dbd57613dbc6133ef565b5b5f613dca84828501613d94565b91505092915050565b5f81519050613de1816134ac565b92915050565b5f60208284031215613dfc57613dfb6133ef565b5b5f613e0984828501613dd3565b91505092915050565b5f81519050919050565b5f81905092915050565b5f613e3082613e12565b613e3a8185613e1c565b9350613e4a818560208601613370565b80840191505092915050565b5f613e618284613e26565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\xA0`@R0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP4\x80\x15a\0BW__\xFD[Pa\0Qa\0V` \x1B` \x1CV[a\x01\xB6V[_a\0ea\x01T` \x1B` \x1CV[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\0\xAFW`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x01QWg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`@Qa\x01H\x91\x90a\x01\x9DV[`@Q\x80\x91\x03\x90\xA1[PV[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x01\x97\x81a\x01{V[\x82RPPV[_` \x82\x01\x90Pa\x01\xB0_\x83\x01\x84a\x01\x8EV[\x92\x91PPV[`\x80Qa>la\x01\xDC_9_\x81\x81a)\xCD\x01R\x81\x81a*\"\x01Ra+\xDC\x01Ra>l_\xF3\xFE`\x80`@R`\x046\x10a\x01\xD7W_5`\xE0\x1C\x80c\x8A\xF7\x7F\x03\x11a\x01\x01W\x80c\xAD<\xB1\xCC\x11a\0\x94W\x80c\xEE\xD0\x1E}\x11a\0cW\x80c\xEE\xD0\x1E}\x14a\x06?W\x80c\xF1$L]\x14a\x06{W\x80c\xF2\xFD\xE3\x8B\x14a\x06\xB7W\x80c\xFA\xACs\xB4\x14a\x06\xDFWa\x01\xD7V[\x80c\xAD<\xB1\xCC\x14a\x05\x99W\x80c\xD8\x90\x9E\xAB\x14a\x05\xC3W\x80c\xE0\xE5_\xD7\x14a\x05\xEDW\x80c\xE3\x0C9x\x14a\x06\x15Wa\x01\xD7V[\x80c\x95\x94\xA9\x01\x11a\0\xD0W\x80c\x95\x94\xA9\x01\x14a\x04\xE5W\x80c\x9E\x16\x7Fv\x14a\x05\rW\x80c\x9F\x8E\xC9\x1C\x14a\x055W\x80c\xA7\xABD@\x14a\x05qWa\x01\xD7V[\x80c\x8A\xF7\x7F\x03\x14a\x04/W\x80c\x8BO{;\x14a\x04kW\x80c\x8D\xA5\xCB[\x14a\x04\x93W\x80c\x94\x1C\x8D\xF6\x14a\x04\xBDWa\x01\xD7V[\x80cE\xE3\xB1\x93\x11a\x01yW\x80ce2t_\x11a\x01HW\x80ce2t_\x14a\x03\xB3W\x80cj\xAF\xA9v\x14a\x03\xDBW\x80cqP\x18\xA6\x14a\x04\x03W\x80cy\xBAP\x97\x14a\x04\x19Wa\x01\xD7V[\x80cE\xE3\xB1\x93\x14a\x02\xF5W\x80cO\x1E\xF2\x86\x14a\x031W\x80cR\xD1\x90-\x14a\x03MW\x80cb,\x07\x8F\x14a\x03wWa\x01\xD7V[\x80c9L{\xD6\x11a\x01\xB5W\x80c9L{\xD6\x14a\x02UW\x80c;A\xA6\xDD\x14a\x02}W\x80c@\xC2O\x15\x14a\x02\xA5W\x80cB\x8Ev\xD8\x14a\x02\xCDWa\x01\xD7V[\x80c\r\x8En,\x14a\x01\xDBW\x80c&s\x9E|\x14a\x02\x05W\x80c)4y\xB1\x14a\x02-W[__\xFD[4\x80\x15a\x01\xE6W__\xFD[Pa\x01\xEFa\x07\x07V[`@Qa\x01\xFC\x91\x90a3\xC6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x10W__\xFD[Pa\x02+`\x04\x806\x03\x81\x01\x90a\x02&\x91\x90a4XV[a\x07\x82V[\0[4\x80\x15a\x028W__\xFD[Pa\x02S`\x04\x806\x03\x81\x01\x90a\x02N\x91\x90a4\xD6V[a\x08\xA8V[\0[4\x80\x15a\x02`W__\xFD[Pa\x02{`\x04\x806\x03\x81\x01\x90a\x02v\x91\x90a5fV[a\t\x97V[\0[4\x80\x15a\x02\x88W__\xFD[Pa\x02\xA3`\x04\x806\x03\x81\x01\x90a\x02\x9E\x91\x90a5\xB6V[a\x0C$V[\0[4\x80\x15a\x02\xB0W__\xFD[Pa\x02\xCB`\x04\x806\x03\x81\x01\x90a\x02\xC6\x91\x90a5\xE1V[a\x0EqV[\0[4\x80\x15a\x02\xD8W__\xFD[Pa\x02\xF3`\x04\x806\x03\x81\x01\x90a\x02\xEE\x91\x90a4XV[a\x11\x06V[\0[4\x80\x15a\x03\0W__\xFD[Pa\x03\x1B`\x04\x806\x03\x81\x01\x90a\x03\x16\x91\x90a4XV[a\x12,V[`@Qa\x03(\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[a\x03K`\x04\x806\x03\x81\x01\x90a\x03F\x91\x90a7\xC9V[a\x12cV[\0[4\x80\x15a\x03XW__\xFD[Pa\x03aa\x12\x82V[`@Qa\x03n\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x82W__\xFD[Pa\x03\x9D`\x04\x806\x03\x81\x01\x90a\x03\x98\x91\x90a5\xB6V[a\x12\xB3V[`@Qa\x03\xAA\x91\x90a82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xBEW__\xFD[Pa\x03\xD9`\x04\x806\x03\x81\x01\x90a\x03\xD4\x91\x90a4XV[a\x12\xE6V[\0[4\x80\x15a\x03\xE6W__\xFD[Pa\x04\x01`\x04\x806\x03\x81\x01\x90a\x03\xFC\x91\x90a5\xE1V[a\x14\x0CV[\0[4\x80\x15a\x04\x0EW__\xFD[Pa\x04\x17a\x16\xA1V[\0[4\x80\x15a\x04$W__\xFD[Pa\x04-a\x16\xB4V[\0[4\x80\x15a\x04:W__\xFD[Pa\x04U`\x04\x806\x03\x81\x01\x90a\x04P\x91\x90a5\xB6V[a\x17BV[`@Qa\x04b\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04vW__\xFD[Pa\x04\x91`\x04\x806\x03\x81\x01\x90a\x04\x8C\x91\x90a8\xE9V[a\x17jV[\0[4\x80\x15a\x04\x9EW__\xFD[Pa\x04\xA7a\x19\tV[`@Qa\x04\xB4\x91\x90a9RV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xC8W__\xFD[Pa\x04\xE3`\x04\x806\x03\x81\x01\x90a\x04\xDE\x91\x90a5\xE1V[a\x19>V[\0[4\x80\x15a\x04\xF0W__\xFD[Pa\x05\x0B`\x04\x806\x03\x81\x01\x90a\x05\x06\x91\x90a5\xE1V[a\x1B\xCBV[\0[4\x80\x15a\x05\x18W__\xFD[Pa\x053`\x04\x806\x03\x81\x01\x90a\x05.\x91\x90a5\xB6V[a\x1E\xADV[\0[4\x80\x15a\x05@W__\xFD[Pa\x05[`\x04\x806\x03\x81\x01\x90a\x05V\x91\x90a5\xB6V[a \x82V[`@Qa\x05h\x91\x90a9\x85V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05|W__\xFD[Pa\x05\x97`\x04\x806\x03\x81\x01\x90a\x05\x92\x91\x90a4\xD6V[a \x9DV[\0[4\x80\x15a\x05\xA4W__\xFD[Pa\x05\xADa!\xC4V[`@Qa\x05\xBA\x91\x90a3\xC6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xCEW__\xFD[Pa\x05\xD7a!\xFDV[`@Qa\x05\xE4\x91\x90a82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xF8W__\xFD[Pa\x06\x13`\x04\x806\x03\x81\x01\x90a\x06\x0E\x91\x90a5\xB6V[a\"\x14V[\0[4\x80\x15a\x06 W__\xFD[Pa\x06)a#eV[`@Qa\x066\x91\x90a9RV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06JW__\xFD[Pa\x06e`\x04\x806\x03\x81\x01\x90a\x06`\x91\x90a5\xB6V[a#\x9AV[`@Qa\x06r\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\x86W__\xFD[Pa\x06\xA1`\x04\x806\x03\x81\x01\x90a\x06\x9C\x91\x90a5\xB6V[a#\xC2V[`@Qa\x06\xAE\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\xC2W__\xFD[Pa\x06\xDD`\x04\x806\x03\x81\x01\x90a\x06\xD8\x91\x90a9\x9EV[a#\xEAV[\0[4\x80\x15a\x06\xEAW__\xFD[Pa\x07\x05`\x04\x806\x03\x81\x01\x90a\x07\0\x91\x90a5\xE1V[a$\xA3V[\0[```@Q\x80`@\x01`@R\x80`\r\x81R` \x01\x7FKmsManagement\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x07H_a'1V[a\x07R`\x01a'1V[a\x07[_a'1V[`@Q` \x01a\x07n\x94\x93\x92\x91\x90a:\x97V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[a\x07\x8Aa'\xFBV[\x81\x81_a\x07\x95a(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x07\xAB\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x07\xFCW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x08\x05a(\x82V[\x90P\x80`\x01\x01_\x81T\x80\x92\x91\x90a\x08\x1B\x90a;^V[\x91\x90PUP_\x81`\x01\x01T\x90P_\x82_\x01\x88\x88`@Qa\x08<\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x85\x113z\xD8\x9C \xEF\x90O\x13\xE9\xB9\xE7\xEB\x05\xF4\xC0\xFF\xF1(\xA8v\x0C,\x1DCl\x11\x1B0\x9F\x82\x82`@Qa\x08\x96\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[a\x08\xB0a'\xFBV[\x82\x82_a\x08\xBBa(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x08\xD1\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\t\"W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\t+a(\x82V[\x90P\x84\x81_\x01\x88\x88`@Qa\tA\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP\x7F\xF0\xBB\x05\xED\x11\xB1\x1E\x9A\x83\xDB\x1F\xDF\xDB6L\xE1W\x9B\x1B\xB3M@\x80\xB6p\xB5yF\x92\x07\x9E=\x87\x87\x87`@Qa\t\x86\x93\x92\x91\x90a;\xF8V[`@Q\x80\x91\x03\x90\xA1PPPPPPPV[a\t\x9Fa'\xFBV[_a\t\xA8a(\x82V[\x90P\x80`\r\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\n\x0CW\x83`@Q\x7FI\xCB\xBF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\x03\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x0B\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\nmW\x83`@Q\x7F\xBEH\xE7\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\nd\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x81\x83\x03a\n\xB1W\x82`@Q\x7F\xD6\xF4\xA6\x87\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\xA8\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0B\x12W\x82`@Q\x7F\x05\xFCaa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\t\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0BsW\x81`@Q\x7F(\0\"\x9D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0Bj\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x82\x81`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x81\x81`\x0F\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP`\x01\x81`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xFDhW@>\xAD\xBD\xC0\xC8\xB6\x8B\x15\x1B\xB4j1\xD6\xC3R\xAFy\xB0e\xD4r\xCB\xD7w\x81QM\xD4\x84\x84\x84\x84`\"\x01_\x89\x81R` \x01\x90\x81R` \x01_ T`@Qa\x0C\x16\x94\x93\x92\x91\x90a<(V[`@Q\x80\x91\x03\x90\xA1PPPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCBf\x17U3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0Cq\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x0C\x87W__\xFD[PZ\xFA\x15\x80\x15a\x0C\x99W=__>=_\xFD[PPPP_a\x0C\xA6a(\x82V[\x90P\x80`\x19\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\rEW\x81`@Q\x7F\xC3\xE68\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r<\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x19\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x1A\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\r\xCE\x90a;^V[\x91\x90PUP\x81\x81`\x1B\x01T\x14\x15\x80\x15a\r\xFFWPa\r\xFE\x81`\x1A\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta(\xA9V[[\x15a\x0EmW\x80`\x1C\x01\x82\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91PU\x81\x81`\x1B\x01\x81\x90UP\x7Fpf\x963y\xF0d\x8Adu\x86\r\xE4Dz\xEC\x0B\x04\xC0=\xB5\xBC\x16\x9B@\x1C\x88\xD1o\xF6W\x8D\x82`@Qa\x0Ed\x91\x90a82V[`@Q\x80\x91\x03\x90\xA1[PPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E\xBE\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x0E\xD4W__\xFD[PZ\xFA\x15\x80\x15a\x0E\xE6W=__>=_\xFD[PPPP_a\x0E\xF3a(\x82V[\x90P\x80`\x16\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x0F\x92W\x81`@Q\x7F\xE8|`|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0F\x89\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x16\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x15\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x10\x1B\x90a;^V[\x91\x90PUP\x80`\x17\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x10eWPa\x10d\x81`\x15\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x11\x01W`\x01\x81`\x17\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81`$\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1F\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x95\xC1#\xAE>cW21`Rrf~\x14\x10\xA9\xE3\xC6\x18\"\x7F\xF5\t\xE3\xC6\xA1R\xC6d\xB3\xA2\x84\x84\x83`@Qa\x10\xF7\x93\x92\x91\x90a<kV[`@Q\x80\x91\x03\x90\xA1P[PPPV[a\x11\x0Ea'\xFBV[\x81\x81_a\x11\x19a(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x11/\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x11\x80W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x11\x89a(\x82V[\x90P\x80`\t\x01_\x81T\x80\x92\x91\x90a\x11\x9F\x90a;^V[\x91\x90PUP_\x81`\t\x01T\x90P_\x82_\x01\x88\x88`@Qa\x11\xC0\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FYm\x11\x1Eu\x12\xA4~\xE0\xC5\xEBf\xEE\xF6\xF2,E\xD8\xADO\xEE\x05 4\x07\x85\xA1\x1E\"\x1E\xD5\x12\x82\x82`@Qa\x12\x1A\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[__a\x126a(\x82V[\x90P\x80_\x01\x84\x84`@Qa\x12K\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x91PP\x92\x91PPV[a\x12ka)\xCBV[a\x12t\x82a*\xB1V[a\x12~\x82\x82a*\xBCV[PPV[_a\x12\x8Ba+\xDAV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[__a\x12\xBDa(\x82V[\x90P\x80`\x1C\x01\x83\x81T\x81\x10a\x12\xD5Wa\x12\xD4a<\xA0V[[\x90_R` _ \x01T\x91PP\x91\x90PV[a\x12\xEEa'\xFBV[\x81\x81_a\x12\xF9a(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x13\x0F\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x13`W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x13ia(\x82V[\x90P\x80`\x14\x01_\x81T\x80\x92\x91\x90a\x13\x7F\x90a;^V[\x91\x90PUP_\x81`\x14\x01T\x90P_\x82_\x01\x88\x88`@Qa\x13\xA0\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`$\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x04\xF7\xB6\xAE\".\xF4r\x89\xCF\xDC|;\x82\x98'>\x1B\xC9.\xEB4n\x80Qc\xEDK7\xE7k)\x82\x82`@Qa\x13\xFA\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x14Y\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x14oW__\xFD[PZ\xFA\x15\x80\x15a\x14\x81W=__>=_\xFD[PPPP_a\x14\x8Ea(\x82V[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x15-W\x81`@Q\x7F\x03\0\xA3\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15$\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x07\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x15\xB6\x90a;^V[\x91\x90PUP\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x16\0WPa\x15\xFF\x81`\x07\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x16\x9CW`\x01\x81`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1D\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xBC\x9Dy6m\xADk\x97-a\xE3\xF1V~\xE2\xF1\xE2L\x0C\xE1\x0Cr\xDC\xFB\x14R\xEE;5\xC8\xD1>\x84\x84\x83`@Qa\x16\x92\x93\x92\x91\x90a<kV[`@Q\x80\x91\x03\x90\xA1P[PPPV[a\x16\xA9a'\xFBV[a\x16\xB2_a,aV[V[_a\x16\xBDa,\x9EV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x16\xDEa#eV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x176W\x80`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17-\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[a\x17?\x81a,aV[PV[__a\x17La(\x82V[\x90P\x80`\x1D\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[`\x02_a\x17ua,\xA5V[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x17\xBDWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x17\xF4W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x18Ia\x18Da\x19\tV[a,\xCCV[_a\x18Ra(\x82V[\x90P\x83\x81_\x01\x86`@Qa\x18f\x91\x90a<\xCDV[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x86`@Qa\x18\x8C\x91\x90a<\xCDV[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x18\xFB\x91\x90a=\x05V[`@Q\x80\x91\x03\x90\xA1PPPPV[__a\x19\x13a,\xE0V[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x19\x8B\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x19\xA1W__\xFD[PZ\xFA\x15\x80\x15a\x19\xB3W=__>=_\xFD[PPPP_a\x19\xC0a(\x82V[\x90P\x80`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1A^W\x81`@Q~9\x1D\xD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1AU\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1A\xE7\x90a;^V[\x91\x90PUP\x80`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1B1WPa\x1B0\x81`\n\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x1B\xC6W`\x01\x81`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81`\"\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7Fv\x865Es\\)\xCF\x1C~\xBB\0(\xE74\xD1\xD78\xD2\xA5\xD0\x99\xBA\x8BR\x9C\x17\x935J\xE3\x12\x83\x83`@Qa\x1B\xBD\x92\x91\x90a=\x1EV[`@Q\x80\x91\x03\x90\xA1[PPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1C\x18\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1C.W__\xFD[PZ\xFA\x15\x80\x15a\x1C@W=__>=_\xFD[PPPP_a\x1CMa(\x82V[\x90P\x80`\x10\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1C\xECW\x81`@Q\x7F\xCF\xA5\xF2\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1C\xE3\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x10\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x11\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1Du\x90a;^V[\x91\x90PUP\x80`\x12\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1D\xBFWPa\x1D\xBE\x81`\x11\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x1E\xA8W`\x01\x81`\x12\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x81\x81`\x13\x01_\x83`\x0E\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x83`\x0F\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ \x81\x90UP_\x81`\"\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xC6\x07\xD1iX@\xCE\r\xC9\xD2JT~\xDA\xECH^\x01\xE5\x93\x9AT\x0C.L#\xE3`\xE2$7g\x84\x84\x83`@Qa\x1E\x9E\x93\x92\x91\x90a<kV[`@Q\x80\x91\x03\x90\xA1P[PPPV[a\x1E\xB5a'\xFBV[_a\x1E\xBEa(\x82V[\x90P\x80`\x18\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1F\"W\x81`@Q\x7F#\xBDO\xD3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1F\x19\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x1F\x83W\x81`@Q\x7F\xE3\xB3F\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1Fz\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[_\x81`\x1B\x01T\x14a \x1CW\x80`\x12\x01_\x82`\x13\x01_\x84`\x1B\x01T\x81R` \x01\x90\x81R` \x01_ _\x85\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a \x1BW\x80`\x1B\x01T\x82`@Q\x7F\xE8T\xAC(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a \x12\x92\x91\x90a=\x1EV[`@Q\x80\x91\x03\x90\xFD[[`\x01\x81`\x18\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xBD\xDC\x16b\xCD\xAA\x87\x1A\xE4\r\x9E\xDC\x0EC^\t\x88\xC6\t[\xFC|E*\xED\xB1l\x89`kku\x82`@Qa v\x91\x90a82V[`@Q\x80\x91\x03\x90\xA1PPV[__a \x8Ca(\x82V[\x90P\x80`\x1B\x01T\x83\x14\x91PP\x91\x90PV[a \xA5a'\xFBV[_a \xAEa(\x82V[\x90P\x80`%\x01\x84\x84`@Qa \xC4\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a!#W\x83\x83`@Q\x7F\xBC\xDF\x99\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a!\x1A\x92\x91\x90a=EV[`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01\x85\x85`@Qa!7\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x85\x85`@Qa!_\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xE6=\xBA\x14\xBA!lC\xEF\xBDn\x02\x06\xCD!r\xA4\xA6O\x89L\x8F\xAF\0F\x91\xAAo\x88\xFE\xCA\xDA\x84\x84\x84`@Qa!\xB6\x93\x92\x91\x90a;\xF8V[`@Q\x80\x91\x03\x90\xA1PPPPV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[__a\"\x07a(\x82V[\x90P\x80`\x1B\x01T\x91PP\x90V[a\"\x1Ca'\xFBV[_a\"%a(\x82V[\x90P\x80`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\"\x89W\x81`@Q\x7F[\xF8N\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\x80\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\"\xEAW\x81`@Q\x7F\xBE\xA1\xCAL\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\xE1\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7Fyd\x82\xD6\0\t\xA8\x031R\x9A\xFBH\xBF4\x15\xA1l\x9F\xF59\xA8\xCD\x13\x8Ew\xA7E\xAFl{x\x82\x82` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T`@Qa#Y\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPV[__a#oa-\x07V[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[__a#\xA4a(\x82V[\x90P\x80`\x1F\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[__a#\xCCa(\x82V[\x90P\x80`\x1E\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[a#\xF2a'\xFBV[_a#\xFBa-\x07V[\x90P\x81\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a$]a\x19\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F8\xD1k\x8C\xAC\"\xD9\x9F\xC7\xC1$\xB9\xCD\r\xE2\xD3\xFA\x1F\xAE\xF4 \xBF\xE7\x91\xD8\xC3b\xD7e\xE2'\0`@Q`@Q\x80\x91\x03\x90\xA3PPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a$\xF0\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a%\x06W__\xFD[PZ\xFA\x15\x80\x15a%\x18W=__>=_\xFD[PPPP_a%%a(\x82V[\x90P\x80`\x04\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a%\xC4W\x81`@Q\x7F`\x9EZ0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xBB\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x04\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x02\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a&M\x90a;^V[\x91\x90PUP\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a&\x97WPa&\x96\x81`\x02\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a',W`\x01\x81`\x03\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81` \x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FA\x87\x01\x1EY\x17\x16\x94\x87.\x08\xB3\xD3\xCD\xD3\xC9\x01Vz\xA0\xE3\x8A\xAAm\xBBCh\x83|\x1E\x8E4\x83\x83`@Qa'#\x92\x91\x90a=\x1EV[`@Q\x80\x91\x03\x90\xA1[PPPV[``_`\x01a'?\x84a-.V[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a']Wa'\\a6\xA5V[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a'\x8FW\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a'\xF0W\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a'\xE5Wa'\xE4a=gV[[\x04\x94P_\x85\x03a'\x9CW[\x81\x93PPPP\x91\x90PV[a(\x03a,\x9EV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a(!a\x19\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a(\x80Wa(Da,\x9EV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a(w\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[V[_\x7F\xA4\x8Bw3\x1A\xB9w\xC4\x87\xFCs\xC0\xAF\xBE\x86\xF1\xA3\xA10\xC0hE?I}7j\xB9\xFA\xC7\xE0\0\x90P\x90V[__s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cg\x99\xEFR`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a)\x08W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a),\x91\x90a=\xA8V[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[__s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cG\xCDK>`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a)\x99W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a)\xBD\x91\x90a=\xA8V[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a*xWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a*_a.\x7FV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a*\xAFW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a*\xB9a'\xFBV[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a+$WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a+!\x91\x90a=\xE7V[`\x01[a+eW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a+\\\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a+\xCBW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a+\xC2\x91\x90a6.V[`@Q\x80\x91\x03\x90\xFD[a+\xD5\x83\x83a.\xD2V[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a,_W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a,ja-\x07V[\x90P\x80_\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90Ua,\x9A\x82a/DV[PPV[_3\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[a,\xD4a0\x15V[a,\xDD\x81a0UV[PV[_\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x90P\x90V[_\x7F#~\x15\x82\"\xE3\xE6\x96\x8Br\xB9\xDB\r\x80C\xAA\xCF\x07J\xD9\xF6P\xF0\xD1`kM\x82\xEEC,\0\x90P\x90V[___\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a-\x8AWz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a-\x80Wa-\x7Fa=gV[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a-\xC7Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a-\xBDWa-\xBCa=gV[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a-\xF6Wf#\x86\xF2o\xC1\0\0\x83\x81a-\xECWa-\xEBa=gV[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a.\x1FWc\x05\xF5\xE1\0\x83\x81a.\x15Wa.\x14a=gV[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a.DWa'\x10\x83\x81a.:Wa.9a=gV[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a.gW`d\x83\x81a.]Wa.\\a=gV[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a.vW`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_a.\xAB\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba0\xD9V[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a.\xDB\x82a0\xE2V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a/7Wa/1\x82\x82a1\xABV[Pa/@V[a/?a2+V[[PPV[_a/Ma,\xE0V[\x90P_\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x82\x82_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPPV[a0\x1Da2gV[a0SW`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a0]a0\x15V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a0\xCDW_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0\xC4\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[a0\xD6\x81a,aV[PV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a1=W\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a14\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[\x80a1i\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba0\xD9V[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``__\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa1\xD4\x91\x90a>VV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a2\x0CW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a2\x11V[``\x91P[P\x91P\x91Pa2!\x85\x83\x83a2\x85V[\x92PPP\x92\x91PPV[_4\x11\x15a2eW`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a2pa,\xA5V[_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[``\x82a2\x9AWa2\x95\x82a3\x12V[a3\nV[_\x82Q\x14\x80\x15a2\xC0WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a3\x02W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a2\xF9\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa3\x0BV[[\x93\x92PPPV[_\x81Q\x11\x15a3$W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a3\x98\x82a3VV[a3\xA2\x81\x85a3`V[\x93Pa3\xB2\x81\x85` \x86\x01a3pV[a3\xBB\x81a3~V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra3\xDE\x81\x84a3\x8EV[\x90P\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a4\x18Wa4\x17a3\xF7V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a45Wa44a3\xFBV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a4QWa4Pa3\xFFV[[\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15a4nWa4ma3\xEFV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a4\x8BWa4\x8Aa3\xF3V[[a4\x97\x85\x82\x86\x01a4\x03V[\x92P\x92PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[a4\xB5\x81a4\xA3V[\x81\x14a4\xBFW__\xFD[PV[_\x815\x90Pa4\xD0\x81a4\xACV[\x92\x91PPV[___`@\x84\x86\x03\x12\x15a4\xEDWa4\xECa3\xEFV[[_\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a5\nWa5\ta3\xF3V[[a5\x16\x86\x82\x87\x01a4\x03V[\x93P\x93PP` a5)\x86\x82\x87\x01a4\xC2V[\x91PP\x92P\x92P\x92V[_\x81\x90P\x91\x90PV[a5E\x81a53V[\x81\x14a5OW__\xFD[PV[_\x815\x90Pa5`\x81a5<V[\x92\x91PPV[___``\x84\x86\x03\x12\x15a5}Wa5|a3\xEFV[[_a5\x8A\x86\x82\x87\x01a5RV[\x93PP` a5\x9B\x86\x82\x87\x01a5RV[\x92PP`@a5\xAC\x86\x82\x87\x01a5RV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a5\xCBWa5\xCAa3\xEFV[[_a5\xD8\x84\x82\x85\x01a5RV[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a5\xF7Wa5\xF6a3\xEFV[[_a6\x04\x85\x82\x86\x01a5RV[\x92PP` a6\x15\x85\x82\x86\x01a5RV[\x91PP\x92P\x92\x90PV[a6(\x81a4\xA3V[\x82RPPV[_` \x82\x01\x90Pa6A_\x83\x01\x84a6\x1FV[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a6p\x82a6GV[\x90P\x91\x90PV[a6\x80\x81a6fV[\x81\x14a6\x8AW__\xFD[PV[_\x815\x90Pa6\x9B\x81a6wV[\x92\x91PPV[__\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a6\xDB\x82a3~V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a6\xFAWa6\xF9a6\xA5V[[\x80`@RPPPV[_a7\x0Ca3\xE6V[\x90Pa7\x18\x82\x82a6\xD2V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a77Wa76a6\xA5V[[a7@\x82a3~V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a7ma7h\x84a7\x1DV[a7\x03V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a7\x89Wa7\x88a6\xA1V[[a7\x94\x84\x82\x85a7MV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a7\xB0Wa7\xAFa3\xF7V[[\x815a7\xC0\x84\x82` \x86\x01a7[V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a7\xDFWa7\xDEa3\xEFV[[_a7\xEC\x85\x82\x86\x01a6\x8DV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\rWa8\x0Ca3\xF3V[[a8\x19\x85\x82\x86\x01a7\x9CV[\x91PP\x92P\x92\x90PV[a8,\x81a53V[\x82RPPV[_` \x82\x01\x90Pa8E_\x83\x01\x84a8#V[\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a8eWa8da6\xA5V[[a8n\x82a3~V[\x90P` \x81\x01\x90P\x91\x90PV[_a8\x8Da8\x88\x84a8KV[a7\x03V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a8\xA9Wa8\xA8a6\xA1V[[a8\xB4\x84\x82\x85a7MV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a8\xD0Wa8\xCFa3\xF7V[[\x815a8\xE0\x84\x82` \x86\x01a8{V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a8\xFFWa8\xFEa3\xEFV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9\x1CWa9\x1Ba3\xF3V[[a9(\x85\x82\x86\x01a8\xBCV[\x92PP` a99\x85\x82\x86\x01a4\xC2V[\x91PP\x92P\x92\x90PV[a9L\x81a6fV[\x82RPPV[_` \x82\x01\x90Pa9e_\x83\x01\x84a9CV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a9\x7F\x81a9kV[\x82RPPV[_` \x82\x01\x90Pa9\x98_\x83\x01\x84a9vV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a9\xB3Wa9\xB2a3\xEFV[[_a9\xC0\x84\x82\x85\x01a6\x8DV[\x91PP\x92\x91PPV[_\x81\x90P\x92\x91PPV[_a9\xDD\x82a3VV[a9\xE7\x81\x85a9\xC9V[\x93Pa9\xF7\x81\x85` \x86\x01a3pV[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a:7`\x02\x83a9\xC9V[\x91Pa:B\x82a:\x03V[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a:\x81`\x01\x83a9\xC9V[\x91Pa:\x8C\x82a:MV[`\x01\x82\x01\x90P\x91\x90PV[_a:\xA2\x82\x87a9\xD3V[\x91Pa:\xAD\x82a:+V[\x91Pa:\xB9\x82\x86a9\xD3V[\x91Pa:\xC4\x82a:uV[\x91Pa:\xD0\x82\x85a9\xD3V[\x91Pa:\xDB\x82a:uV[\x91Pa:\xE7\x82\x84a9\xD3V[\x91P\x81\x90P\x95\x94PPPPPV[_a;\0\x83\x85a9\xC9V[\x93Pa;\r\x83\x85\x84a7MV[\x82\x84\x01\x90P\x93\x92PPPV[_a;%\x82\x84\x86a:\xF5V[\x91P\x81\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a;h\x82a53V[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a;\x9AWa;\x99a;1V[[`\x01\x82\x01\x90P\x91\x90PV[_`@\x82\x01\x90Pa;\xB8_\x83\x01\x85a8#V[a;\xC5` \x83\x01\x84a6\x1FV[\x93\x92PPPV[_a;\xD7\x83\x85a3`V[\x93Pa;\xE4\x83\x85\x84a7MV[a;\xED\x83a3~V[\x84\x01\x90P\x93\x92PPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01Ra<\x11\x81\x85\x87a;\xCCV[\x90Pa< ` \x83\x01\x84a6\x1FV[\x94\x93PPPPV[_`\x80\x82\x01\x90Pa<;_\x83\x01\x87a8#V[a<H` \x83\x01\x86a8#V[a<U`@\x83\x01\x85a8#V[a<b``\x83\x01\x84a6\x1FV[\x95\x94PPPPPV[_``\x82\x01\x90Pa<~_\x83\x01\x86a8#V[a<\x8B` \x83\x01\x85a8#V[a<\x98`@\x83\x01\x84a6\x1FV[\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_a<\xD8\x82\x84a9\xD3V[\x91P\x81\x90P\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a<\xFF\x81a<\xE3V[\x82RPPV[_` \x82\x01\x90Pa=\x18_\x83\x01\x84a<\xF6V[\x92\x91PPV[_`@\x82\x01\x90Pa=1_\x83\x01\x85a8#V[a=>` \x83\x01\x84a8#V[\x93\x92PPPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra=^\x81\x84\x86a;\xCCV[\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x81Q\x90Pa=\xA2\x81a5<V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\xBDWa=\xBCa3\xEFV[[_a=\xCA\x84\x82\x85\x01a=\x94V[\x91PP\x92\x91PPV[_\x81Q\x90Pa=\xE1\x81a4\xACV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\xFCWa=\xFBa3\xEFV[[_a>\t\x84\x82\x85\x01a=\xD3V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a>0\x82a>\x12V[a>:\x81\x85a>\x1CV[\x93Pa>J\x81\x85` \x86\x01a3pV[\x80\x84\x01\x91PP\x92\x91PPV[_a>a\x82\x84a>&V[\x91P\x81\x90P\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106101d7575f3560e01c80638af77f0311610101578063ad3cb1cc11610094578063eed01e7d11610063578063eed01e7d1461063f578063f1244c5d1461067b578063f2fde38b146106b7578063faac73b4146106df576101d7565b8063ad3cb1cc14610599578063d8909eab146105c3578063e0e55fd7146105ed578063e30c397814610615576101d7565b80639594a901116100d05780639594a901146104e55780639e167f761461050d5780639f8ec91c14610535578063a7ab444014610571576101d7565b80638af77f031461042f5780638b4f7b3b1461046b5780638da5cb5b14610493578063941c8df6146104bd576101d7565b806345e3b193116101795780636532745f116101485780636532745f146103b35780636aafa976146103db578063715018a61461040357806379ba509714610419576101d7565b806345e3b193146102f55780634f1ef2861461033157806352d1902d1461034d578063622c078f14610377576101d7565b8063394c7bd6116101b5578063394c7bd6146102555780633b41a6dd1461027d57806340c24f15146102a5578063428e76d8146102cd576101d7565b80630d8e6e2c146101db57806326739e7c14610205578063293479b11461022d575b5f5ffd5b3480156101e6575f5ffd5b506101ef610707565b6040516101fc91906133c6565b60405180910390f35b348015610210575f5ffd5b5061022b60048036038101906102269190613458565b610782565b005b348015610238575f5ffd5b50610253600480360381019061024e91906134d6565b6108a8565b005b348015610260575f5ffd5b5061027b60048036038101906102769190613566565b610997565b005b348015610288575f5ffd5b506102a3600480360381019061029e91906135b6565b610c24565b005b3480156102b0575f5ffd5b506102cb60048036038101906102c691906135e1565b610e71565b005b3480156102d8575f5ffd5b506102f360048036038101906102ee9190613458565b611106565b005b348015610300575f5ffd5b5061031b60048036038101906103169190613458565b61122c565b604051610328919061362e565b60405180910390f35b61034b600480360381019061034691906137c9565b611263565b005b348015610358575f5ffd5b50610361611282565b60405161036e919061362e565b60405180910390f35b348015610382575f5ffd5b5061039d600480360381019061039891906135b6565b6112b3565b6040516103aa9190613832565b60405180910390f35b3480156103be575f5ffd5b506103d960048036038101906103d49190613458565b6112e6565b005b3480156103e6575f5ffd5b5061040160048036038101906103fc91906135e1565b61140c565b005b34801561040e575f5ffd5b506104176116a1565b005b348015610424575f5ffd5b5061042d6116b4565b005b34801561043a575f5ffd5b50610455600480360381019061045091906135b6565b611742565b604051610462919061362e565b60405180910390f35b348015610476575f5ffd5b50610491600480360381019061048c91906138e9565b61176a565b005b34801561049e575f5ffd5b506104a7611909565b6040516104b49190613952565b60405180910390f35b3480156104c8575f5ffd5b506104e360048036038101906104de91906135e1565b61193e565b005b3480156104f0575f5ffd5b5061050b600480360381019061050691906135e1565b611bcb565b005b348015610518575f5ffd5b50610533600480360381019061052e91906135b6565b611ead565b005b348015610540575f5ffd5b5061055b600480360381019061055691906135b6565b612082565b6040516105689190613985565b60405180910390f35b34801561057c575f5ffd5b50610597600480360381019061059291906134d6565b61209d565b005b3480156105a4575f5ffd5b506105ad6121c4565b6040516105ba91906133c6565b60405180910390f35b3480156105ce575f5ffd5b506105d76121fd565b6040516105e49190613832565b60405180910390f35b3480156105f8575f5ffd5b50610613600480360381019061060e91906135b6565b612214565b005b348015610620575f5ffd5b50610629612365565b6040516106369190613952565b60405180910390f35b34801561064a575f5ffd5b50610665600480360381019061066091906135b6565b61239a565b604051610672919061362e565b60405180910390f35b348015610686575f5ffd5b506106a1600480360381019061069c91906135b6565b6123c2565b6040516106ae919061362e565b60405180910390f35b3480156106c2575f5ffd5b506106dd60048036038101906106d8919061399e565b6123ea565b005b3480156106ea575f5ffd5b50610705600480360381019061070091906135e1565b6124a3565b005b60606040518060400160405280600d81526020017f4b6d734d616e6167656d656e74000000000000000000000000000000000000008152506107485f612731565b6107526001612731565b61075b5f612731565b60405160200161076e9493929190613a97565b604051602081830303815290604052905090565b61078a6127fb565b81815f610795612882565b90508060250183836040516107ab929190613b19565b90815260200160405180910390205f9054906101000a900460ff166107fc576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610805612882565b9050806001015f81548092919061081b90613b5e565b91905055505f816001015490505f825f01888860405161083c929190613b19565b908152602001604051809103902054905080836021015f8481526020019081526020015f20819055507f8511337ad89c20ef904f13e9b9e7eb05f4c0fff128a8760c2c1d436c111b309f8282604051610896929190613ba5565b60405180910390a15050505050505050565b6108b06127fb565b82825f6108bb612882565b90508060250183836040516108d1929190613b19565b90815260200160405180910390205f9054906101000a900460ff16610922576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61092b612882565b905084815f018888604051610941929190613b19565b9081526020016040518091039020819055507ff0bb05ed11b11e9a83db1fdfdb364ce1579b1bb34d4080b670b5794692079e3d87878760405161098693929190613bf8565b60405180910390a150505050505050565b61099f6127fb565b5f6109a8612882565b905080600d015f8581526020019081526020015f205f9054906101000a900460ff1615610a0c57836040517f49cbbf34000000000000000000000000000000000000000000000000000000008152600401610a039190613832565b60405180910390fd5b80600b015f8581526020019081526020015f205f9054906101000a900460ff16610a6d57836040517fbe48e7d0000000000000000000000000000000000000000000000000000000008152600401610a649190613832565b60405180910390fd5b818303610ab157826040517fd6f4a687000000000000000000000000000000000000000000000000000000008152600401610aa89190613832565b60405180910390fd5b806008015f8481526020019081526020015f205f9054906101000a900460ff16610b1257826040517f05fc6161000000000000000000000000000000000000000000000000000000008152600401610b099190613832565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff16610b7357816040517f2800229d000000000000000000000000000000000000000000000000000000008152600401610b6a9190613832565b60405180910390fd5b8281600e015f8681526020019081526020015f20819055508181600f015f8681526020019081526020015f2081905550600181600d015f8681526020019081526020015f205f6101000a81548160ff0219169083151502179055507ffd6857403eadbdc0c8b68b151bb46a31d6c352af79b065d472cbd77781514dd4848484846022015f8981526020019081526020015f2054604051610c169493929190613c28565b60405180910390a150505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663cb661755336040518263ffffffff1660e01b8152600401610c719190613952565b5f6040518083038186803b158015610c87575f5ffd5b505afa158015610c99573d5f5f3e3d5ffd5b505050505f610ca6612882565b9050806019015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610d4557816040517fc3e638e6000000000000000000000000000000000000000000000000000000008152600401610d3c9190613832565b60405180910390fd5b6001816019015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080601a015f8381526020019081526020015f205f815480929190610dce90613b5e565b91905055508181601b015414158015610dff5750610dfe81601a015f8481526020019081526020015f20546128a9565b5b15610e6d5780601c0182908060018154018082558091505060019003905f5260205f20015f90919091909150558181601b01819055507f7066963379f0648a6475860de4447aec0b04c03db5bc169b401c88d16ff6578d82604051610e649190613832565b60405180910390a15b5050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401610ebe9190613952565b5f6040518083038186803b158015610ed4575f5ffd5b505afa158015610ee6573d5f5f3e3d5ffd5b505050505f610ef3612882565b9050806016015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610f9257816040517fe87c607c000000000000000000000000000000000000000000000000000000008152600401610f899190613832565b60405180910390fd5b6001816016015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806015015f8481526020019081526020015f205f81548092919061101b90613b5e565b9190505550806017015f8381526020019081526020015f205f9054906101000a900460ff161580156110655750611064816015015f8581526020019081526020015f205461293a565b5b15611101576001816017015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816024015f8581526020019081526020015f205490508082601f015f8581526020019081526020015f20819055507f95c123ae3e63573231605272667e1410a9e3c618227ff509e3c6a152c664b3a28484836040516110f793929190613c6b565b60405180910390a1505b505050565b61110e6127fb565b81815f611119612882565b905080602501838360405161112f929190613b19565b90815260200160405180910390205f9054906101000a900460ff16611180576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611189612882565b9050806009015f81548092919061119f90613b5e565b91905055505f816009015490505f825f0188886040516111c0929190613b19565b908152602001604051809103902054905080836023015f8481526020019081526020015f20819055507f596d111e7512a47ee0c5eb66eef6f22c45d8ad4fee0520340785a11e221ed512828260405161121a929190613ba5565b60405180910390a15050505050505050565b5f5f611236612882565b9050805f01848460405161124b929190613b19565b90815260200160405180910390205491505092915050565b61126b6129cb565b61127482612ab1565b61127e8282612abc565b5050565b5f61128b612bda565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f5f6112bd612882565b905080601c0183815481106112d5576112d4613ca0565b5b905f5260205f200154915050919050565b6112ee6127fb565b81815f6112f9612882565b905080602501838360405161130f929190613b19565b90815260200160405180910390205f9054906101000a900460ff16611360576040517f7dcd17f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611369612882565b9050806014015f81548092919061137f90613b5e565b91905055505f816014015490505f825f0188886040516113a0929190613b19565b908152602001604051809103902054905080836024015f8481526020019081526020015f20819055507f04f7b6ae222ef47289cfdc7c3b8298273e1bc92eeb346e805163ed4b37e76b2982826040516113fa929190613ba5565b60405180910390a15050505050505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016114599190613952565b5f6040518083038186803b15801561146f575f5ffd5b505afa158015611481573d5f5f3e3d5ffd5b505050505f61148e612882565b9050806006015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161561152d57816040517f0300a3a90000000000000000000000000000000000000000000000000000000081526004016115249190613832565b60405180910390fd5b6001816006015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806007015f8381526020019081526020015f205f8154809291906115b690613b5e565b9190505550806008015f8381526020019081526020015f205f9054906101000a900460ff1615801561160057506115ff816007015f8481526020019081526020015f205461293a565b5b1561169c576001816008015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055505f816020015f8581526020019081526020015f205490508082601d015f8581526020019081526020015f20819055507fbc9d79366dad6b972d61e3f1567ee2f1e24c0ce10c72dcfb1452ee3b35c8d13e84848360405161169293929190613c6b565b60405180910390a1505b505050565b6116a96127fb565b6116b25f612c61565b565b5f6116bd612c9e565b90508073ffffffffffffffffffffffffffffffffffffffff166116de612365565b73ffffffffffffffffffffffffffffffffffffffff161461173657806040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161172d9190613952565b60405180910390fd5b61173f81612c61565b50565b5f5f61174c612882565b905080601d015f8481526020019081526020015f2054915050919050565b60025f611775612ca5565b9050805f0160089054906101000a900460ff16806117bd57508167ffffffffffffffff16815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b156117f4576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001815f0160086101000a81548160ff021916908315150217905550611849611844611909565b612ccc565b5f611852612882565b905083815f01866040516118669190613ccd565b9081526020016040518091039020819055506001816025018660405161188c9190613ccd565b90815260200160405180910390205f6101000a81548160ff021916908315150217905550505f815f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2826040516118fb9190613d05565b60405180910390a150505050565b5f5f611913612ce0565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b815260040161198b9190613952565b5f6040518083038186803b1580156119a1575f5ffd5b505afa1580156119b3573d5f5f3e3d5ffd5b505050505f6119c0612882565b905080600c015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611a5e57816040517e391dd6000000000000000000000000000000000000000000000000000000008152600401611a559190613832565b60405180910390fd5b600181600c015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555080600a015f8481526020019081526020015f205f815480929190611ae790613b5e565b919050555080600b015f8381526020019081526020015f205f9054906101000a900460ff16158015611b315750611b3081600a015f8581526020019081526020015f205461293a565b5b15611bc657600181600b015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806023015f8481526020019081526020015f2054816022015f8481526020019081526020015f20819055507f76863545735c29cf1c7ebb0028e734d1d738d2a5d099ba8b529c1793354ae3128383604051611bbd929190613d1e565b60405180910390a15b505050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b8152600401611c189190613952565b5f6040518083038186803b158015611c2e575f5ffd5b505afa158015611c40573d5f5f3e3d5ffd5b505050505f611c4d612882565b9050806010015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615611cec57816040517fcfa5f2bb000000000000000000000000000000000000000000000000000000008152600401611ce39190613832565b60405180910390fd5b6001816010015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806011015f8381526020019081526020015f205f815480929190611d7590613b5e565b9190505550806012015f8381526020019081526020015f205f9054906101000a900460ff16158015611dbf5750611dbe816011015f8481526020019081526020015f205461293a565b5b15611ea8576001816012015f8481526020019081526020015f205f6101000a81548160ff02191690831515021790555081816013015f83600e015f8781526020019081526020015f205481526020019081526020015f205f83600f015f8781526020019081526020015f205481526020019081526020015f20819055505f816022015f8581526020019081526020015f205490508082601e015f8581526020019081526020015f20819055507fc607d1695840ce0dc9d24a547edaec485e01e5939a540c2e4c23e360e2243767848483604051611e9e93929190613c6b565b60405180910390a1505b505050565b611eb56127fb565b5f611ebe612882565b9050806018015f8381526020019081526020015f205f9054906101000a900460ff1615611f2257816040517f23bd4fd3000000000000000000000000000000000000000000000000000000008152600401611f199190613832565b60405180910390fd5b806008015f8381526020019081526020015f205f9054906101000a900460ff16611f8357816040517fe3b34609000000000000000000000000000000000000000000000000000000008152600401611f7a9190613832565b60405180910390fd5b5f81601b01541461201c57806012015f826013015f84601b015481526020019081526020015f205f8581526020019081526020015f205481526020019081526020015f205f9054906101000a900460ff1661201b5780601b0154826040517fe854ac28000000000000000000000000000000000000000000000000000000008152600401612012929190613d1e565b60405180910390fd5b5b6001816018015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507fbddc1662cdaa871ae40d9edc0e435e0988c6095bfc7c452aedb16c89606b6b75826040516120769190613832565b60405180910390a15050565b5f5f61208c612882565b905080601b01548314915050919050565b6120a56127fb565b5f6120ae612882565b90508060250184846040516120c4929190613b19565b90815260200160405180910390205f9054906101000a900460ff16156121235783836040517fbcdf999300000000000000000000000000000000000000000000000000000000815260040161211a929190613d45565b60405180910390fd5b81815f018585604051612137929190613b19565b908152602001604051809103902081905550600181602501858560405161215f929190613b19565b90815260200160405180910390205f6101000a81548160ff0219169083151502179055507fe63dba14ba216c43efbd6e0206cd2172a4a64f894c8faf004691aa6f88fecada8484846040516121b693929190613bf8565b60405180910390a150505050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b5f5f612207612882565b905080601b015491505090565b61221c6127fb565b5f612225612882565b9050806005015f8381526020019081526020015f205f9054906101000a900460ff161561228957816040517f5bf84e110000000000000000000000000000000000000000000000000000000081526004016122809190613832565b60405180910390fd5b806003015f8381526020019081526020015f205f9054906101000a900460ff166122ea57816040517fbea1ca4c0000000000000000000000000000000000000000000000000000000081526004016122e19190613832565b60405180910390fd5b6001816005015f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055507f796482d60009a80331529afb48bf3415a16c9ff539a8cd138e77a745af6c7b7882826020015f8581526020019081526020015f2054604051612359929190613ba5565b60405180910390a15050565b5f5f61236f612d07565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b5f5f6123a4612882565b905080601f015f8481526020019081526020015f2054915050919050565b5f5f6123cc612882565b905080601e015f8481526020019081526020015f2054915050919050565b6123f26127fb565b5f6123fb612d07565b905081815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1661245d611909565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a35050565b73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff1663c6275258336040518263ffffffff1660e01b81526004016124f09190613952565b5f6040518083038186803b158015612506575f5ffd5b505afa158015612518573d5f5f3e3d5ffd5b505050505f612525612882565b9050806004015f8381526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156125c457816040517f609e5a300000000000000000000000000000000000000000000000000000000081526004016125bb9190613832565b60405180910390fd5b6001816004015f8481526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550806002015f8481526020019081526020015f205f81548092919061264d90613b5e565b9190505550806003015f8381526020019081526020015f205f9054906101000a900460ff161580156126975750612696816002015f8581526020019081526020015f205461293a565b5b1561272c576001816003015f8481526020019081526020015f205f6101000a81548160ff021916908315150217905550806021015f8481526020019081526020015f2054816020015f8481526020019081526020015f20819055507f4187011e59171694872e08b3d3cdd3c901567aa0e38aaa6dbb4368837c1e8e348383604051612723929190613d1e565b60405180910390a15b505050565b60605f600161273f84612d2e565b0190505f8167ffffffffffffffff81111561275d5761275c6136a5565b5b6040519080825280601f01601f19166020018201604052801561278f5781602001600182028036833780820191505090505b5090505f82602001820190505b6001156127f0578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816127e5576127e4613d67565b5b0494505f850361279c575b819350505050919050565b612803612c9e565b73ffffffffffffffffffffffffffffffffffffffff16612821611909565b73ffffffffffffffffffffffffffffffffffffffff161461288057612844612c9e565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016128779190613952565b60405180910390fd5b565b5f7fa48b77331ab977c487fc73c0afbe86f1a3a130c068453f497d376ab9fac7e000905090565b5f5f73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff16636799ef526040518163ffffffff1660e01b8152600401602060405180830381865afa158015612908573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061292c9190613da8565b905080831015915050919050565b5f5f73c7d45661a345ec5ca0e8521cfef7e32fda0daa6873ffffffffffffffffffffffffffffffffffffffff166347cd4b3e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612999573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129bd9190613da8565b905080831015915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480612a7857507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612a5f612e7f565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612aaf576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612ab96127fb565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612b2457506040513d601f19601f82011682018060405250810190612b219190613de7565b60015b612b6557816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612b5c9190613952565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b8114612bcb57806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401612bc2919061362e565b60405180910390fd5b612bd58383612ed2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612c5f576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f612c6a612d07565b9050805f015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055612c9a82612f44565b5050565b5f33905090565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612cd4613015565b612cdd81613055565b50565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f7f237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00905090565b5f5f5f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612d8a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612d8057612d7f613d67565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612dc7576d04ee2d6d415b85acef81000000008381612dbd57612dbc613d67565b5b0492506020810190505b662386f26fc100008310612df657662386f26fc100008381612dec57612deb613d67565b5b0492506010810190505b6305f5e1008310612e1f576305f5e1008381612e1557612e14613d67565b5b0492506008810190505b6127108310612e44576127108381612e3a57612e39613d67565b5b0492506004810190505b60648310612e675760648381612e5d57612e5c613d67565b5b0492506002810190505b600a8310612e76576001810190505b80915050919050565b5f612eab7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6130d9565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612edb826130e2565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115612f3757612f3182826131ab565b50612f40565b612f3f61322b565b5b5050565b5f612f4d612ce0565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b61301d613267565b613053576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61305d613015565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036130cd575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016130c49190613952565b60405180910390fd5b6130d681612c61565b50565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b0361313d57806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016131349190613952565b60405180910390fd5b806131697f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6130d9565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff16846040516131d49190613e56565b5f60405180830381855af49150503d805f811461320c576040519150601f19603f3d011682016040523d82523d5f602084013e613211565b606091505b5091509150613221858383613285565b9250505092915050565b5f341115613265576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f613270612ca5565b5f0160089054906101000a900460ff16905090565b60608261329a5761329582613312565b61330a565b5f82511480156132c057505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561330257836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016132f99190613952565b60405180910390fd5b81905061330b565b5b9392505050565b5f815111156133245780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61339882613356565b6133a28185613360565b93506133b2818560208601613370565b6133bb8161337e565b840191505092915050565b5f6020820190508181035f8301526133de818461338e565b905092915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112613418576134176133f7565b5b8235905067ffffffffffffffff811115613435576134346133fb565b5b602083019150836001820283011115613451576134506133ff565b5b9250929050565b5f5f6020838503121561346e5761346d6133ef565b5b5f83013567ffffffffffffffff81111561348b5761348a6133f3565b5b61349785828601613403565b92509250509250929050565b5f819050919050565b6134b5816134a3565b81146134bf575f5ffd5b50565b5f813590506134d0816134ac565b92915050565b5f5f5f604084860312156134ed576134ec6133ef565b5b5f84013567ffffffffffffffff81111561350a576135096133f3565b5b61351686828701613403565b93509350506020613529868287016134c2565b9150509250925092565b5f819050919050565b61354581613533565b811461354f575f5ffd5b50565b5f813590506135608161353c565b92915050565b5f5f5f6060848603121561357d5761357c6133ef565b5b5f61358a86828701613552565b935050602061359b86828701613552565b92505060406135ac86828701613552565b9150509250925092565b5f602082840312156135cb576135ca6133ef565b5b5f6135d884828501613552565b91505092915050565b5f5f604083850312156135f7576135f66133ef565b5b5f61360485828601613552565b925050602061361585828601613552565b9150509250929050565b613628816134a3565b82525050565b5f6020820190506136415f83018461361f565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61367082613647565b9050919050565b61368081613666565b811461368a575f5ffd5b50565b5f8135905061369b81613677565b92915050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6136db8261337e565b810181811067ffffffffffffffff821117156136fa576136f96136a5565b5b80604052505050565b5f61370c6133e6565b905061371882826136d2565b919050565b5f67ffffffffffffffff821115613737576137366136a5565b5b6137408261337e565b9050602081019050919050565b828183375f83830152505050565b5f61376d6137688461371d565b613703565b905082815260208101848484011115613789576137886136a1565b5b61379484828561374d565b509392505050565b5f82601f8301126137b0576137af6133f7565b5b81356137c084826020860161375b565b91505092915050565b5f5f604083850312156137df576137de6133ef565b5b5f6137ec8582860161368d565b925050602083013567ffffffffffffffff81111561380d5761380c6133f3565b5b6138198582860161379c565b9150509250929050565b61382c81613533565b82525050565b5f6020820190506138455f830184613823565b92915050565b5f67ffffffffffffffff821115613865576138646136a5565b5b61386e8261337e565b9050602081019050919050565b5f61388d6138888461384b565b613703565b9050828152602081018484840111156138a9576138a86136a1565b5b6138b484828561374d565b509392505050565b5f82601f8301126138d0576138cf6133f7565b5b81356138e084826020860161387b565b91505092915050565b5f5f604083850312156138ff576138fe6133ef565b5b5f83013567ffffffffffffffff81111561391c5761391b6133f3565b5b613928858286016138bc565b9250506020613939858286016134c2565b9150509250929050565b61394c81613666565b82525050565b5f6020820190506139655f830184613943565b92915050565b5f8115159050919050565b61397f8161396b565b82525050565b5f6020820190506139985f830184613976565b92915050565b5f602082840312156139b3576139b26133ef565b5b5f6139c08482850161368d565b91505092915050565b5f81905092915050565b5f6139dd82613356565b6139e781856139c9565b93506139f7818560208601613370565b80840191505092915050565b7f20760000000000000000000000000000000000000000000000000000000000005f82015250565b5f613a376002836139c9565b9150613a4282613a03565b600282019050919050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f613a816001836139c9565b9150613a8c82613a4d565b600182019050919050565b5f613aa282876139d3565b9150613aad82613a2b565b9150613ab982866139d3565b9150613ac482613a75565b9150613ad082856139d3565b9150613adb82613a75565b9150613ae782846139d3565b915081905095945050505050565b5f613b0083856139c9565b9350613b0d83858461374d565b82840190509392505050565b5f613b25828486613af5565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613b6882613533565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b9a57613b99613b31565b5b600182019050919050565b5f604082019050613bb85f830185613823565b613bc5602083018461361f565b9392505050565b5f613bd78385613360565b9350613be483858461374d565b613bed8361337e565b840190509392505050565b5f6040820190508181035f830152613c11818587613bcc565b9050613c20602083018461361f565b949350505050565b5f608082019050613c3b5f830187613823565b613c486020830186613823565b613c556040830185613823565b613c62606083018461361f565b95945050505050565b5f606082019050613c7e5f830186613823565b613c8b6020830185613823565b613c98604083018461361f565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f613cd882846139d3565b915081905092915050565b5f67ffffffffffffffff82169050919050565b613cff81613ce3565b82525050565b5f602082019050613d185f830184613cf6565b92915050565b5f604082019050613d315f830185613823565b613d3e6020830184613823565b9392505050565b5f6020820190508181035f830152613d5e818486613bcc565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f81519050613da28161353c565b92915050565b5f60208284031215613dbd57613dbc6133ef565b5b5f613dca84828501613d94565b91505092915050565b5f81519050613de1816134ac565b92915050565b5f60208284031215613dfc57613dfb6133ef565b5b5f613e0984828501613dd3565b91505092915050565b5f81519050919050565b5f81905092915050565b5f613e3082613e12565b613e3a8185613e1c565b9350613e4a818560208601613370565b80840191505092915050565b5f613e618284613e26565b91508190509291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01\xD7W_5`\xE0\x1C\x80c\x8A\xF7\x7F\x03\x11a\x01\x01W\x80c\xAD<\xB1\xCC\x11a\0\x94W\x80c\xEE\xD0\x1E}\x11a\0cW\x80c\xEE\xD0\x1E}\x14a\x06?W\x80c\xF1$L]\x14a\x06{W\x80c\xF2\xFD\xE3\x8B\x14a\x06\xB7W\x80c\xFA\xACs\xB4\x14a\x06\xDFWa\x01\xD7V[\x80c\xAD<\xB1\xCC\x14a\x05\x99W\x80c\xD8\x90\x9E\xAB\x14a\x05\xC3W\x80c\xE0\xE5_\xD7\x14a\x05\xEDW\x80c\xE3\x0C9x\x14a\x06\x15Wa\x01\xD7V[\x80c\x95\x94\xA9\x01\x11a\0\xD0W\x80c\x95\x94\xA9\x01\x14a\x04\xE5W\x80c\x9E\x16\x7Fv\x14a\x05\rW\x80c\x9F\x8E\xC9\x1C\x14a\x055W\x80c\xA7\xABD@\x14a\x05qWa\x01\xD7V[\x80c\x8A\xF7\x7F\x03\x14a\x04/W\x80c\x8BO{;\x14a\x04kW\x80c\x8D\xA5\xCB[\x14a\x04\x93W\x80c\x94\x1C\x8D\xF6\x14a\x04\xBDWa\x01\xD7V[\x80cE\xE3\xB1\x93\x11a\x01yW\x80ce2t_\x11a\x01HW\x80ce2t_\x14a\x03\xB3W\x80cj\xAF\xA9v\x14a\x03\xDBW\x80cqP\x18\xA6\x14a\x04\x03W\x80cy\xBAP\x97\x14a\x04\x19Wa\x01\xD7V[\x80cE\xE3\xB1\x93\x14a\x02\xF5W\x80cO\x1E\xF2\x86\x14a\x031W\x80cR\xD1\x90-\x14a\x03MW\x80cb,\x07\x8F\x14a\x03wWa\x01\xD7V[\x80c9L{\xD6\x11a\x01\xB5W\x80c9L{\xD6\x14a\x02UW\x80c;A\xA6\xDD\x14a\x02}W\x80c@\xC2O\x15\x14a\x02\xA5W\x80cB\x8Ev\xD8\x14a\x02\xCDWa\x01\xD7V[\x80c\r\x8En,\x14a\x01\xDBW\x80c&s\x9E|\x14a\x02\x05W\x80c)4y\xB1\x14a\x02-W[__\xFD[4\x80\x15a\x01\xE6W__\xFD[Pa\x01\xEFa\x07\x07V[`@Qa\x01\xFC\x91\x90a3\xC6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02\x10W__\xFD[Pa\x02+`\x04\x806\x03\x81\x01\x90a\x02&\x91\x90a4XV[a\x07\x82V[\0[4\x80\x15a\x028W__\xFD[Pa\x02S`\x04\x806\x03\x81\x01\x90a\x02N\x91\x90a4\xD6V[a\x08\xA8V[\0[4\x80\x15a\x02`W__\xFD[Pa\x02{`\x04\x806\x03\x81\x01\x90a\x02v\x91\x90a5fV[a\t\x97V[\0[4\x80\x15a\x02\x88W__\xFD[Pa\x02\xA3`\x04\x806\x03\x81\x01\x90a\x02\x9E\x91\x90a5\xB6V[a\x0C$V[\0[4\x80\x15a\x02\xB0W__\xFD[Pa\x02\xCB`\x04\x806\x03\x81\x01\x90a\x02\xC6\x91\x90a5\xE1V[a\x0EqV[\0[4\x80\x15a\x02\xD8W__\xFD[Pa\x02\xF3`\x04\x806\x03\x81\x01\x90a\x02\xEE\x91\x90a4XV[a\x11\x06V[\0[4\x80\x15a\x03\0W__\xFD[Pa\x03\x1B`\x04\x806\x03\x81\x01\x90a\x03\x16\x91\x90a4XV[a\x12,V[`@Qa\x03(\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[a\x03K`\x04\x806\x03\x81\x01\x90a\x03F\x91\x90a7\xC9V[a\x12cV[\0[4\x80\x15a\x03XW__\xFD[Pa\x03aa\x12\x82V[`@Qa\x03n\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\x82W__\xFD[Pa\x03\x9D`\x04\x806\x03\x81\x01\x90a\x03\x98\x91\x90a5\xB6V[a\x12\xB3V[`@Qa\x03\xAA\x91\x90a82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x03\xBEW__\xFD[Pa\x03\xD9`\x04\x806\x03\x81\x01\x90a\x03\xD4\x91\x90a4XV[a\x12\xE6V[\0[4\x80\x15a\x03\xE6W__\xFD[Pa\x04\x01`\x04\x806\x03\x81\x01\x90a\x03\xFC\x91\x90a5\xE1V[a\x14\x0CV[\0[4\x80\x15a\x04\x0EW__\xFD[Pa\x04\x17a\x16\xA1V[\0[4\x80\x15a\x04$W__\xFD[Pa\x04-a\x16\xB4V[\0[4\x80\x15a\x04:W__\xFD[Pa\x04U`\x04\x806\x03\x81\x01\x90a\x04P\x91\x90a5\xB6V[a\x17BV[`@Qa\x04b\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04vW__\xFD[Pa\x04\x91`\x04\x806\x03\x81\x01\x90a\x04\x8C\x91\x90a8\xE9V[a\x17jV[\0[4\x80\x15a\x04\x9EW__\xFD[Pa\x04\xA7a\x19\tV[`@Qa\x04\xB4\x91\x90a9RV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x04\xC8W__\xFD[Pa\x04\xE3`\x04\x806\x03\x81\x01\x90a\x04\xDE\x91\x90a5\xE1V[a\x19>V[\0[4\x80\x15a\x04\xF0W__\xFD[Pa\x05\x0B`\x04\x806\x03\x81\x01\x90a\x05\x06\x91\x90a5\xE1V[a\x1B\xCBV[\0[4\x80\x15a\x05\x18W__\xFD[Pa\x053`\x04\x806\x03\x81\x01\x90a\x05.\x91\x90a5\xB6V[a\x1E\xADV[\0[4\x80\x15a\x05@W__\xFD[Pa\x05[`\x04\x806\x03\x81\x01\x90a\x05V\x91\x90a5\xB6V[a \x82V[`@Qa\x05h\x91\x90a9\x85V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05|W__\xFD[Pa\x05\x97`\x04\x806\x03\x81\x01\x90a\x05\x92\x91\x90a4\xD6V[a \x9DV[\0[4\x80\x15a\x05\xA4W__\xFD[Pa\x05\xADa!\xC4V[`@Qa\x05\xBA\x91\x90a3\xC6V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xCEW__\xFD[Pa\x05\xD7a!\xFDV[`@Qa\x05\xE4\x91\x90a82V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x05\xF8W__\xFD[Pa\x06\x13`\x04\x806\x03\x81\x01\x90a\x06\x0E\x91\x90a5\xB6V[a\"\x14V[\0[4\x80\x15a\x06 W__\xFD[Pa\x06)a#eV[`@Qa\x066\x91\x90a9RV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06JW__\xFD[Pa\x06e`\x04\x806\x03\x81\x01\x90a\x06`\x91\x90a5\xB6V[a#\x9AV[`@Qa\x06r\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\x86W__\xFD[Pa\x06\xA1`\x04\x806\x03\x81\x01\x90a\x06\x9C\x91\x90a5\xB6V[a#\xC2V[`@Qa\x06\xAE\x91\x90a6.V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x06\xC2W__\xFD[Pa\x06\xDD`\x04\x806\x03\x81\x01\x90a\x06\xD8\x91\x90a9\x9EV[a#\xEAV[\0[4\x80\x15a\x06\xEAW__\xFD[Pa\x07\x05`\x04\x806\x03\x81\x01\x90a\x07\0\x91\x90a5\xE1V[a$\xA3V[\0[```@Q\x80`@\x01`@R\x80`\r\x81R` \x01\x7FKmsManagement\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RPa\x07H_a'1V[a\x07R`\x01a'1V[a\x07[_a'1V[`@Q` \x01a\x07n\x94\x93\x92\x91\x90a:\x97V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x90V[a\x07\x8Aa'\xFBV[\x81\x81_a\x07\x95a(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x07\xAB\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x07\xFCW`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x08\x05a(\x82V[\x90P\x80`\x01\x01_\x81T\x80\x92\x91\x90a\x08\x1B\x90a;^V[\x91\x90PUP_\x81`\x01\x01T\x90P_\x82_\x01\x88\x88`@Qa\x08<\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x85\x113z\xD8\x9C \xEF\x90O\x13\xE9\xB9\xE7\xEB\x05\xF4\xC0\xFF\xF1(\xA8v\x0C,\x1DCl\x11\x1B0\x9F\x82\x82`@Qa\x08\x96\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[a\x08\xB0a'\xFBV[\x82\x82_a\x08\xBBa(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x08\xD1\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\t\"W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\t+a(\x82V[\x90P\x84\x81_\x01\x88\x88`@Qa\tA\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP\x7F\xF0\xBB\x05\xED\x11\xB1\x1E\x9A\x83\xDB\x1F\xDF\xDB6L\xE1W\x9B\x1B\xB3M@\x80\xB6p\xB5yF\x92\x07\x9E=\x87\x87\x87`@Qa\t\x86\x93\x92\x91\x90a;\xF8V[`@Q\x80\x91\x03\x90\xA1PPPPPPPV[a\t\x9Fa'\xFBV[_a\t\xA8a(\x82V[\x90P\x80`\r\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\n\x0CW\x83`@Q\x7FI\xCB\xBF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\x03\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x0B\x01_\x85\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\nmW\x83`@Q\x7F\xBEH\xE7\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\nd\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x81\x83\x03a\n\xB1W\x82`@Q\x7F\xD6\xF4\xA6\x87\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\xA8\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0B\x12W\x82`@Q\x7F\x05\xFCaa\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0B\t\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x0BsW\x81`@Q\x7F(\0\"\x9D\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0Bj\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x82\x81`\x0E\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x81\x81`\x0F\x01_\x86\x81R` \x01\x90\x81R` \x01_ \x81\x90UP`\x01\x81`\r\x01_\x86\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xFDhW@>\xAD\xBD\xC0\xC8\xB6\x8B\x15\x1B\xB4j1\xD6\xC3R\xAFy\xB0e\xD4r\xCB\xD7w\x81QM\xD4\x84\x84\x84\x84`\"\x01_\x89\x81R` \x01\x90\x81R` \x01_ T`@Qa\x0C\x16\x94\x93\x92\x91\x90a<(V[`@Q\x80\x91\x03\x90\xA1PPPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xCBf\x17U3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0Cq\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x0C\x87W__\xFD[PZ\xFA\x15\x80\x15a\x0C\x99W=__>=_\xFD[PPPP_a\x0C\xA6a(\x82V[\x90P\x80`\x19\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\rEW\x81`@Q\x7F\xC3\xE68\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\r<\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x19\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x1A\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\r\xCE\x90a;^V[\x91\x90PUP\x81\x81`\x1B\x01T\x14\x15\x80\x15a\r\xFFWPa\r\xFE\x81`\x1A\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta(\xA9V[[\x15a\x0EmW\x80`\x1C\x01\x82\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91PU\x81\x81`\x1B\x01\x81\x90UP\x7Fpf\x963y\xF0d\x8Adu\x86\r\xE4Dz\xEC\x0B\x04\xC0=\xB5\xBC\x16\x9B@\x1C\x88\xD1o\xF6W\x8D\x82`@Qa\x0Ed\x91\x90a82V[`@Q\x80\x91\x03\x90\xA1[PPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E\xBE\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x0E\xD4W__\xFD[PZ\xFA\x15\x80\x15a\x0E\xE6W=__>=_\xFD[PPPP_a\x0E\xF3a(\x82V[\x90P\x80`\x16\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x0F\x92W\x81`@Q\x7F\xE8|`|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x0F\x89\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x16\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x15\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x10\x1B\x90a;^V[\x91\x90PUP\x80`\x17\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x10eWPa\x10d\x81`\x15\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x11\x01W`\x01\x81`\x17\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81`$\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1F\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x95\xC1#\xAE>cW21`Rrf~\x14\x10\xA9\xE3\xC6\x18\"\x7F\xF5\t\xE3\xC6\xA1R\xC6d\xB3\xA2\x84\x84\x83`@Qa\x10\xF7\x93\x92\x91\x90a<kV[`@Q\x80\x91\x03\x90\xA1P[PPPV[a\x11\x0Ea'\xFBV[\x81\x81_a\x11\x19a(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x11/\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x11\x80W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x11\x89a(\x82V[\x90P\x80`\t\x01_\x81T\x80\x92\x91\x90a\x11\x9F\x90a;^V[\x91\x90PUP_\x81`\t\x01T\x90P_\x82_\x01\x88\x88`@Qa\x11\xC0\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FYm\x11\x1Eu\x12\xA4~\xE0\xC5\xEBf\xEE\xF6\xF2,E\xD8\xADO\xEE\x05 4\x07\x85\xA1\x1E\"\x1E\xD5\x12\x82\x82`@Qa\x12\x1A\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[__a\x126a(\x82V[\x90P\x80_\x01\x84\x84`@Qa\x12K\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x91PP\x92\x91PPV[a\x12ka)\xCBV[a\x12t\x82a*\xB1V[a\x12~\x82\x82a*\xBCV[PPV[_a\x12\x8Ba+\xDAV[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x90P\x90V[__a\x12\xBDa(\x82V[\x90P\x80`\x1C\x01\x83\x81T\x81\x10a\x12\xD5Wa\x12\xD4a<\xA0V[[\x90_R` _ \x01T\x91PP\x91\x90PV[a\x12\xEEa'\xFBV[\x81\x81_a\x12\xF9a(\x82V[\x90P\x80`%\x01\x83\x83`@Qa\x13\x0F\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x13`W`@Q\x7F}\xCD\x17\xF9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_a\x13ia(\x82V[\x90P\x80`\x14\x01_\x81T\x80\x92\x91\x90a\x13\x7F\x90a;^V[\x91\x90PUP_\x81`\x14\x01T\x90P_\x82_\x01\x88\x88`@Qa\x13\xA0\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 T\x90P\x80\x83`$\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\x04\xF7\xB6\xAE\".\xF4r\x89\xCF\xDC|;\x82\x98'>\x1B\xC9.\xEB4n\x80Qc\xEDK7\xE7k)\x82\x82`@Qa\x13\xFA\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x14Y\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x14oW__\xFD[PZ\xFA\x15\x80\x15a\x14\x81W=__>=_\xFD[PPPP_a\x14\x8Ea(\x82V[\x90P\x80`\x06\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x15-W\x81`@Q\x7F\x03\0\xA3\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x15$\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x06\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x07\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x15\xB6\x90a;^V[\x91\x90PUP\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x16\0WPa\x15\xFF\x81`\x07\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x16\x9CW`\x01\x81`\x08\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP_\x81` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1D\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xBC\x9Dy6m\xADk\x97-a\xE3\xF1V~\xE2\xF1\xE2L\x0C\xE1\x0Cr\xDC\xFB\x14R\xEE;5\xC8\xD1>\x84\x84\x83`@Qa\x16\x92\x93\x92\x91\x90a<kV[`@Q\x80\x91\x03\x90\xA1P[PPPV[a\x16\xA9a'\xFBV[a\x16\xB2_a,aV[V[_a\x16\xBDa,\x9EV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x16\xDEa#eV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x176W\x80`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x17-\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[a\x17?\x81a,aV[PV[__a\x17La(\x82V[\x90P\x80`\x1D\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[`\x02_a\x17ua,\xA5V[\x90P\x80_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x80a\x17\xBDWP\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81_\x01_\x90T\x90a\x01\0\n\x90\x04g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15[\x15a\x17\xF4W`@Q\x7F\xF9.\xE8\xA9\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01_a\x01\0\n\x81T\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP`\x01\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x18Ia\x18Da\x19\tV[a,\xCCV[_a\x18Ra(\x82V[\x90P\x83\x81_\x01\x86`@Qa\x18f\x91\x90a<\xCDV[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x86`@Qa\x18\x8C\x91\x90a<\xCDV[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPP_\x81_\x01`\x08a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xC7\xF5\x05\xB2\xF3q\xAE!u\xEEI\x13\xF4I\x9E\x1F&3\xA7\xB5\x93c!\xEE\xD1\xCD\xAE\xB6\x11Q\x81\xD2\x82`@Qa\x18\xFB\x91\x90a=\x05V[`@Q\x80\x91\x03\x90\xA1PPPPV[__a\x19\x13a,\xE0V[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x19\x8B\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x19\xA1W__\xFD[PZ\xFA\x15\x80\x15a\x19\xB3W=__>=_\xFD[PPPP_a\x19\xC0a(\x82V[\x90P\x80`\x0C\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1A^W\x81`@Q~9\x1D\xD6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1AU\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x0C\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\n\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1A\xE7\x90a;^V[\x91\x90PUP\x80`\x0B\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1B1WPa\x1B0\x81`\n\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x1B\xC6W`\x01\x81`\x0B\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`#\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81`\"\x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7Fv\x865Es\\)\xCF\x1C~\xBB\0(\xE74\xD1\xD78\xD2\xA5\xD0\x99\xBA\x8BR\x9C\x17\x935J\xE3\x12\x83\x83`@Qa\x1B\xBD\x92\x91\x90a=\x1EV[`@Q\x80\x91\x03\x90\xA1[PPPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x1C\x18\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x1C.W__\xFD[PZ\xFA\x15\x80\x15a\x1C@W=__>=_\xFD[PPPP_a\x1CMa(\x82V[\x90P\x80`\x10\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1C\xECW\x81`@Q\x7F\xCF\xA5\xF2\xBB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1C\xE3\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x10\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x11\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a\x1Du\x90a;^V[\x91\x90PUP\x80`\x12\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a\x1D\xBFWPa\x1D\xBE\x81`\x11\x01_\x84\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a\x1E\xA8W`\x01\x81`\x12\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x81\x81`\x13\x01_\x83`\x0E\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x83`\x0F\x01_\x87\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ \x81\x90UP_\x81`\"\x01_\x85\x81R` \x01\x90\x81R` \x01_ T\x90P\x80\x82`\x1E\x01_\x85\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7F\xC6\x07\xD1iX@\xCE\r\xC9\xD2JT~\xDA\xECH^\x01\xE5\x93\x9AT\x0C.L#\xE3`\xE2$7g\x84\x84\x83`@Qa\x1E\x9E\x93\x92\x91\x90a<kV[`@Q\x80\x91\x03\x90\xA1P[PPPV[a\x1E\xB5a'\xFBV[_a\x1E\xBEa(\x82V[\x90P\x80`\x18\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x1F\"W\x81`@Q\x7F#\xBDO\xD3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1F\x19\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x08\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\x1F\x83W\x81`@Q\x7F\xE3\xB3F\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x1Fz\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[_\x81`\x1B\x01T\x14a \x1CW\x80`\x12\x01_\x82`\x13\x01_\x84`\x1B\x01T\x81R` \x01\x90\x81R` \x01_ _\x85\x81R` \x01\x90\x81R` \x01_ T\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a \x1BW\x80`\x1B\x01T\x82`@Q\x7F\xE8T\xAC(\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a \x12\x92\x91\x90a=\x1EV[`@Q\x80\x91\x03\x90\xFD[[`\x01\x81`\x18\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xBD\xDC\x16b\xCD\xAA\x87\x1A\xE4\r\x9E\xDC\x0EC^\t\x88\xC6\t[\xFC|E*\xED\xB1l\x89`kku\x82`@Qa v\x91\x90a82V[`@Q\x80\x91\x03\x90\xA1PPV[__a \x8Ca(\x82V[\x90P\x80`\x1B\x01T\x83\x14\x91PP\x91\x90PV[a \xA5a'\xFBV[_a \xAEa(\x82V[\x90P\x80`%\x01\x84\x84`@Qa \xC4\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a!#W\x83\x83`@Q\x7F\xBC\xDF\x99\x93\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a!\x1A\x92\x91\x90a=EV[`@Q\x80\x91\x03\x90\xFD[\x81\x81_\x01\x85\x85`@Qa!7\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 \x81\x90UP`\x01\x81`%\x01\x85\x85`@Qa!_\x92\x91\x90a;\x19V[\x90\x81R` \x01`@Q\x80\x91\x03\x90 _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7F\xE6=\xBA\x14\xBA!lC\xEF\xBDn\x02\x06\xCD!r\xA4\xA6O\x89L\x8F\xAF\0F\x91\xAAo\x88\xFE\xCA\xDA\x84\x84\x84`@Qa!\xB6\x93\x92\x91\x90a;\xF8V[`@Q\x80\x91\x03\x90\xA1PPPPV[`@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F5.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x81V[__a\"\x07a(\x82V[\x90P\x80`\x1B\x01T\x91PP\x90V[a\"\x1Ca'\xFBV[_a\"%a(\x82V[\x90P\x80`\x05\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\"\x89W\x81`@Q\x7F[\xF8N\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\x80\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16a\"\xEAW\x81`@Q\x7F\xBE\xA1\xCAL\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\"\xE1\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x05\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x7Fyd\x82\xD6\0\t\xA8\x031R\x9A\xFBH\xBF4\x15\xA1l\x9F\xF59\xA8\xCD\x13\x8Ew\xA7E\xAFl{x\x82\x82` \x01_\x85\x81R` \x01\x90\x81R` \x01_ T`@Qa#Y\x92\x91\x90a;\xA5V[`@Q\x80\x91\x03\x90\xA1PPV[__a#oa-\x07V[\x90P\x80_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91PP\x90V[__a#\xA4a(\x82V[\x90P\x80`\x1F\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[__a#\xCCa(\x82V[\x90P\x80`\x1E\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x91PP\x91\x90PV[a#\xF2a'\xFBV[_a#\xFBa-\x07V[\x90P\x81\x81_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a$]a\x19\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F8\xD1k\x8C\xAC\"\xD9\x9F\xC7\xC1$\xB9\xCD\r\xE2\xD3\xFA\x1F\xAE\xF4 \xBF\xE7\x91\xD8\xC3b\xD7e\xE2'\0`@Q`@Q\x80\x91\x03\x90\xA3PPV[s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6'RX3`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a$\xF0\x91\x90a9RV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a%\x06W__\xFD[PZ\xFA\x15\x80\x15a%\x18W=__>=_\xFD[PPPP_a%%a(\x82V[\x90P\x80`\x04\x01_\x83\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a%\xC4W\x81`@Q\x7F`\x9EZ0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a%\xBB\x91\x90a82V[`@Q\x80\x91\x03\x90\xFD[`\x01\x81`\x04\x01_\x84\x81R` \x01\x90\x81R` \x01_ _3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`\x02\x01_\x84\x81R` \x01\x90\x81R` \x01_ _\x81T\x80\x92\x91\x90a&M\x90a;^V[\x91\x90PUP\x80`\x03\x01_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15\x80\x15a&\x97WPa&\x96\x81`\x02\x01_\x85\x81R` \x01\x90\x81R` \x01_ Ta):V[[\x15a',W`\x01\x81`\x03\x01_\x84\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x80`!\x01_\x84\x81R` \x01\x90\x81R` \x01_ T\x81` \x01_\x84\x81R` \x01\x90\x81R` \x01_ \x81\x90UP\x7FA\x87\x01\x1EY\x17\x16\x94\x87.\x08\xB3\xD3\xCD\xD3\xC9\x01Vz\xA0\xE3\x8A\xAAm\xBBCh\x83|\x1E\x8E4\x83\x83`@Qa'#\x92\x91\x90a=\x1EV[`@Q\x80\x91\x03\x90\xA1[PPPV[``_`\x01a'?\x84a-.V[\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a']Wa'\\a6\xA5V[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a'\x8FW\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_\x82` \x01\x82\x01\x90P[`\x01\x15a'\xF0W\x80\x80`\x01\x90\x03\x91PP\x7F0123456789abcdef\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\n\x86\x06\x1A\x81S`\n\x85\x81a'\xE5Wa'\xE4a=gV[[\x04\x94P_\x85\x03a'\x9CW[\x81\x93PPPP\x91\x90PV[a(\x03a,\x9EV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a(!a\x19\tV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a(\x80Wa(Da,\x9EV[`@Q\x7F\x11\x8C\xDA\xA7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a(w\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[V[_\x7F\xA4\x8Bw3\x1A\xB9w\xC4\x87\xFCs\xC0\xAF\xBE\x86\xF1\xA3\xA10\xC0hE?I}7j\xB9\xFA\xC7\xE0\0\x90P\x90V[__s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cg\x99\xEFR`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a)\x08W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a),\x91\x90a=\xA8V[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[__s\xC7\xD4Va\xA3E\xEC\\\xA0\xE8R\x1C\xFE\xF7\xE3/\xDA\r\xAAhs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cG\xCDK>`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a)\x99W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a)\xBD\x91\x90a=\xA8V[\x90P\x80\x83\x10\x15\x91PP\x91\x90PV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x80a*xWP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a*_a.\x7FV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14\x15[\x15a*\xAFW`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a*\xB9a'\xFBV[PV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cR\xD1\x90-`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a+$WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a+!\x91\x90a=\xE7V[`\x01[a+eW\x81`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a+\\\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1B\x81\x14a+\xCBW\x80`@Q\x7F\xAA\x1DI\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a+\xC2\x91\x90a6.V[`@Q\x80\x91\x03\x90\xFD[a+\xD5\x83\x83a.\xD2V[PPPV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x160s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a,_W`@Q\x7F\xE0|\x8D\xBA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a,ja-\x07V[\x90P\x80_\x01_a\x01\0\n\x81T\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90Ua,\x9A\x82a/DV[PPV[_3\x90P\x90V[_\x7F\xF0\xC5~\x16\x84\r\xF0@\xF1P\x88\xDC/\x81\xFE9\x1C9#\xBE\xC7>#\xA9f.\xFC\x9C\"\x9Cj\0\x90P\x90V[a,\xD4a0\x15V[a,\xDD\x81a0UV[PV[_\x7F\x90\x16\xD0\x9Dr\xD4\x0F\xDA\xE2\xFD\x8C\xEA\xC6\xB6#Lw\x06!O\xD3\x9C\x1C\xD1\xE6\t\xA0R\x8C\x19\x93\0\x90P\x90V[_\x7F#~\x15\x82\"\xE3\xE6\x96\x8Br\xB9\xDB\r\x80C\xAA\xCF\x07J\xD9\xF6P\xF0\xD1`kM\x82\xEEC,\0\x90P\x90V[___\x90Pz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x10a-\x8AWz\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01\0\0\0\0\0\0\0\0\x83\x81a-\x80Wa-\x7Fa=gV[[\x04\x92P`@\x81\x01\x90P[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a-\xC7Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x81a-\xBDWa-\xBCa=gV[[\x04\x92P` \x81\x01\x90P[f#\x86\xF2o\xC1\0\0\x83\x10a-\xF6Wf#\x86\xF2o\xC1\0\0\x83\x81a-\xECWa-\xEBa=gV[[\x04\x92P`\x10\x81\x01\x90P[c\x05\xF5\xE1\0\x83\x10a.\x1FWc\x05\xF5\xE1\0\x83\x81a.\x15Wa.\x14a=gV[[\x04\x92P`\x08\x81\x01\x90P[a'\x10\x83\x10a.DWa'\x10\x83\x81a.:Wa.9a=gV[[\x04\x92P`\x04\x81\x01\x90P[`d\x83\x10a.gW`d\x83\x81a.]Wa.\\a=gV[[\x04\x92P`\x02\x81\x01\x90P[`\n\x83\x10a.vW`\x01\x81\x01\x90P[\x80\x91PP\x91\x90PV[_a.\xAB\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba0\xD9V[_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x90V[a.\xDB\x82a0\xE2V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xBC|\xD7Z \xEE'\xFD\x9A\xDE\xBA\xB3 A\xF7U!M\xBCk\xFF\xA9\x0C\xC0\"[9\xDA.\\-;`@Q`@Q\x80\x91\x03\x90\xA2_\x81Q\x11\x15a/7Wa/1\x82\x82a1\xABV[Pa/@V[a/?a2+V[[PPV[_a/Ma,\xE0V[\x90P_\x81_\x01_\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P\x82\x82_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0`@Q`@Q\x80\x91\x03\x90\xA3PPPV[a0\x1Da2gV[a0SW`@Q\x7F\xD7\xE6\xBC\xF8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[a0]a0\x15V[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a0\xCDW_`@Q\x7F\x1EO\xBD\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a0\xC4\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[a0\xD6\x81a,aV[PV[_\x81\x90P\x91\x90PV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a1=W\x80`@Q\x7FL\x9C\x8C\xE3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a14\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[\x80a1i\x7F6\x08\x94\xA1;\xA1\xA3!\x06g\xC8(I-\xB9\x8D\xCA> v\xCC75\xA9 \xA3\xCAP]8+\xBC_\x1Ba0\xD9V[_\x01_a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[``__\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84`@Qa1\xD4\x91\x90a>VV[_`@Q\x80\x83\x03\x81\x85Z\xF4\x91PP=\x80_\x81\x14a2\x0CW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a2\x11V[``\x91P[P\x91P\x91Pa2!\x85\x83\x83a2\x85V[\x92PPP\x92\x91PPV[_4\x11\x15a2eW`@Q\x7F\xB3\x98\x97\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[V[_a2pa,\xA5V[_\x01`\x08\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x90V[``\x82a2\x9AWa2\x95\x82a3\x12V[a3\nV[_\x82Q\x14\x80\x15a2\xC0WP_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14[\x15a3\x02W\x83`@Q\x7F\x99\x96\xB3\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a2\xF9\x91\x90a9RV[`@Q\x80\x91\x03\x90\xFD[\x81\x90Pa3\x0BV[[\x93\x92PPPV[_\x81Q\x11\x15a3$W\x80Q\x80\x82` \x01\xFD[`@Q\x7F\xD6\xBD\xA2u\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a3\x98\x82a3VV[a3\xA2\x81\x85a3`V[\x93Pa3\xB2\x81\x85` \x86\x01a3pV[a3\xBB\x81a3~V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra3\xDE\x81\x84a3\x8EV[\x90P\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a4\x18Wa4\x17a3\xF7V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a45Wa44a3\xFBV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a4QWa4Pa3\xFFV[[\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15a4nWa4ma3\xEFV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a4\x8BWa4\x8Aa3\xF3V[[a4\x97\x85\x82\x86\x01a4\x03V[\x92P\x92PP\x92P\x92\x90PV[_\x81\x90P\x91\x90PV[a4\xB5\x81a4\xA3V[\x81\x14a4\xBFW__\xFD[PV[_\x815\x90Pa4\xD0\x81a4\xACV[\x92\x91PPV[___`@\x84\x86\x03\x12\x15a4\xEDWa4\xECa3\xEFV[[_\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a5\nWa5\ta3\xF3V[[a5\x16\x86\x82\x87\x01a4\x03V[\x93P\x93PP` a5)\x86\x82\x87\x01a4\xC2V[\x91PP\x92P\x92P\x92V[_\x81\x90P\x91\x90PV[a5E\x81a53V[\x81\x14a5OW__\xFD[PV[_\x815\x90Pa5`\x81a5<V[\x92\x91PPV[___``\x84\x86\x03\x12\x15a5}Wa5|a3\xEFV[[_a5\x8A\x86\x82\x87\x01a5RV[\x93PP` a5\x9B\x86\x82\x87\x01a5RV[\x92PP`@a5\xAC\x86\x82\x87\x01a5RV[\x91PP\x92P\x92P\x92V[_` \x82\x84\x03\x12\x15a5\xCBWa5\xCAa3\xEFV[[_a5\xD8\x84\x82\x85\x01a5RV[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a5\xF7Wa5\xF6a3\xEFV[[_a6\x04\x85\x82\x86\x01a5RV[\x92PP` a6\x15\x85\x82\x86\x01a5RV[\x91PP\x92P\x92\x90PV[a6(\x81a4\xA3V[\x82RPPV[_` \x82\x01\x90Pa6A_\x83\x01\x84a6\x1FV[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a6p\x82a6GV[\x90P\x91\x90PV[a6\x80\x81a6fV[\x81\x14a6\x8AW__\xFD[PV[_\x815\x90Pa6\x9B\x81a6wV[\x92\x91PPV[__\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a6\xDB\x82a3~V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a6\xFAWa6\xF9a6\xA5V[[\x80`@RPPPV[_a7\x0Ca3\xE6V[\x90Pa7\x18\x82\x82a6\xD2V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a77Wa76a6\xA5V[[a7@\x82a3~V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a7ma7h\x84a7\x1DV[a7\x03V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a7\x89Wa7\x88a6\xA1V[[a7\x94\x84\x82\x85a7MV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a7\xB0Wa7\xAFa3\xF7V[[\x815a7\xC0\x84\x82` \x86\x01a7[V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a7\xDFWa7\xDEa3\xEFV[[_a7\xEC\x85\x82\x86\x01a6\x8DV[\x92PP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a8\rWa8\x0Ca3\xF3V[[a8\x19\x85\x82\x86\x01a7\x9CV[\x91PP\x92P\x92\x90PV[a8,\x81a53V[\x82RPPV[_` \x82\x01\x90Pa8E_\x83\x01\x84a8#V[\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a8eWa8da6\xA5V[[a8n\x82a3~V[\x90P` \x81\x01\x90P\x91\x90PV[_a8\x8Da8\x88\x84a8KV[a7\x03V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a8\xA9Wa8\xA8a6\xA1V[[a8\xB4\x84\x82\x85a7MV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a8\xD0Wa8\xCFa3\xF7V[[\x815a8\xE0\x84\x82` \x86\x01a8{V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a8\xFFWa8\xFEa3\xEFV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a9\x1CWa9\x1Ba3\xF3V[[a9(\x85\x82\x86\x01a8\xBCV[\x92PP` a99\x85\x82\x86\x01a4\xC2V[\x91PP\x92P\x92\x90PV[a9L\x81a6fV[\x82RPPV[_` \x82\x01\x90Pa9e_\x83\x01\x84a9CV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a9\x7F\x81a9kV[\x82RPPV[_` \x82\x01\x90Pa9\x98_\x83\x01\x84a9vV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a9\xB3Wa9\xB2a3\xEFV[[_a9\xC0\x84\x82\x85\x01a6\x8DV[\x91PP\x92\x91PPV[_\x81\x90P\x92\x91PPV[_a9\xDD\x82a3VV[a9\xE7\x81\x85a9\xC9V[\x93Pa9\xF7\x81\x85` \x86\x01a3pV[\x80\x84\x01\x91PP\x92\x91PPV[\x7F v\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a:7`\x02\x83a9\xC9V[\x91Pa:B\x82a:\x03V[`\x02\x82\x01\x90P\x91\x90PV[\x7F.\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a:\x81`\x01\x83a9\xC9V[\x91Pa:\x8C\x82a:MV[`\x01\x82\x01\x90P\x91\x90PV[_a:\xA2\x82\x87a9\xD3V[\x91Pa:\xAD\x82a:+V[\x91Pa:\xB9\x82\x86a9\xD3V[\x91Pa:\xC4\x82a:uV[\x91Pa:\xD0\x82\x85a9\xD3V[\x91Pa:\xDB\x82a:uV[\x91Pa:\xE7\x82\x84a9\xD3V[\x91P\x81\x90P\x95\x94PPPPPV[_a;\0\x83\x85a9\xC9V[\x93Pa;\r\x83\x85\x84a7MV[\x82\x84\x01\x90P\x93\x92PPPV[_a;%\x82\x84\x86a:\xF5V[\x91P\x81\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a;h\x82a53V[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a;\x9AWa;\x99a;1V[[`\x01\x82\x01\x90P\x91\x90PV[_`@\x82\x01\x90Pa;\xB8_\x83\x01\x85a8#V[a;\xC5` \x83\x01\x84a6\x1FV[\x93\x92PPPV[_a;\xD7\x83\x85a3`V[\x93Pa;\xE4\x83\x85\x84a7MV[a;\xED\x83a3~V[\x84\x01\x90P\x93\x92PPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01Ra<\x11\x81\x85\x87a;\xCCV[\x90Pa< ` \x83\x01\x84a6\x1FV[\x94\x93PPPPV[_`\x80\x82\x01\x90Pa<;_\x83\x01\x87a8#V[a<H` \x83\x01\x86a8#V[a<U`@\x83\x01\x85a8#V[a<b``\x83\x01\x84a6\x1FV[\x95\x94PPPPPV[_``\x82\x01\x90Pa<~_\x83\x01\x86a8#V[a<\x8B` \x83\x01\x85a8#V[a<\x98`@\x83\x01\x84a6\x1FV[\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_a<\xD8\x82\x84a9\xD3V[\x91P\x81\x90P\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a<\xFF\x81a<\xE3V[\x82RPPV[_` \x82\x01\x90Pa=\x18_\x83\x01\x84a<\xF6V[\x92\x91PPV[_`@\x82\x01\x90Pa=1_\x83\x01\x85a8#V[a=>` \x83\x01\x84a8#V[\x93\x92PPPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra=^\x81\x84\x86a;\xCCV[\x90P\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x81Q\x90Pa=\xA2\x81a5<V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\xBDWa=\xBCa3\xEFV[[_a=\xCA\x84\x82\x85\x01a=\x94V[\x91PP\x92\x91PPV[_\x81Q\x90Pa=\xE1\x81a4\xACV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a=\xFCWa=\xFBa3\xEFV[[_a>\t\x84\x82\x85\x01a=\xD3V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_a>0\x82a>\x12V[a>:\x81\x85a>\x1CV[\x93Pa>J\x81\x85` \x86\x01a3pV[\x80\x84\x01\x91PP\x92\x91PPV[_a>a\x82\x84a>&V[\x91P\x81\x90P\x92\x91PPV",
    );
    /**Custom error with signature `ActivateKeyKmsNodeAlreadyResponded(uint256)` and selector `0xc3e638e6`.
```solidity
error ActivateKeyKmsNodeAlreadyResponded(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyKmsNodeAlreadyResponded) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyKmsNodeAlreadyResponded(uint256)";
            const SELECTOR: [u8; 4] = [195u8, 230u8, 56u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
        }
    };
    /**Custom error with signature `ActivateKeyRequestAlreadySent(uint256)` and selector `0x23bd4fd3`.
```solidity
error ActivateKeyRequestAlreadySent(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyRequestAlreadySent {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyRequestAlreadySent>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyRequestAlreadySent) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyRequestAlreadySent {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyRequestAlreadySent {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyRequestAlreadySent(uint256)";
            const SELECTOR: [u8; 4] = [35u8, 189u8, 79u8, 211u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
        }
    };
    /**Custom error with signature `ActivateKeyRequiresKeygen(uint256)` and selector `0xe3b34609`.
```solidity
error ActivateKeyRequiresKeygen(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyRequiresKeygen {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyRequiresKeygen>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyRequiresKeygen) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyRequiresKeygen {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyRequiresKeygen {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyRequiresKeygen(uint256)";
            const SELECTOR: [u8; 4] = [227u8, 179u8, 70u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
        }
    };
    /**Custom error with signature `ActivateKeyRequiresKskgen(uint256,uint256)` and selector `0xe854ac28`.
```solidity
error ActivateKeyRequiresKskgen(uint256 currentKeyId, uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ActivateKeyRequiresKskgen {
        #[allow(missing_docs)]
        pub currentKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ActivateKeyRequiresKskgen>
        for UnderlyingRustTuple<'_> {
            fn from(value: ActivateKeyRequiresKskgen) -> Self {
                (value.currentKeyId, value.keyId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ActivateKeyRequiresKskgen {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currentKeyId: tuple.0,
                    keyId: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ActivateKeyRequiresKskgen {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ActivateKeyRequiresKskgen(uint256,uint256)";
            const SELECTOR: [u8; 4] = [232u8, 84u8, 172u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
        }
    };
    /**Custom error with signature `AddressEmptyCode(address)` and selector `0x9996b315`.
```solidity
error AddressEmptyCode(address target);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct AddressEmptyCode {
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AddressEmptyCode> for UnderlyingRustTuple<'_> {
            fn from(value: AddressEmptyCode) -> Self {
                (value.target,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for AddressEmptyCode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { target: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AddressEmptyCode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AddressEmptyCode(address)";
            const SELECTOR: [u8; 4] = [153u8, 150u8, 179u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.target,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `CrsgenKmsNodeAlreadyResponded(uint256)` and selector `0xe87c607c`.
```solidity
error CrsgenKmsNodeAlreadyResponded(uint256 crsId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct CrsgenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<CrsgenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: CrsgenKmsNodeAlreadyResponded) -> Self {
                (value.crsId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for CrsgenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { crsId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for CrsgenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "CrsgenKmsNodeAlreadyResponded(uint256)";
            const SELECTOR: [u8; 4] = [232u8, 124u8, 96u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                )
            }
        }
    };
    /**Custom error with signature `ERC1967InvalidImplementation(address)` and selector `0x4c9c8ce3`.
```solidity
error ERC1967InvalidImplementation(address implementation);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967InvalidImplementation {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967InvalidImplementation>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967InvalidImplementation) -> Self {
                (value.implementation,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1967InvalidImplementation {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { implementation: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967InvalidImplementation {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967InvalidImplementation(address)";
            const SELECTOR: [u8; 4] = [76u8, 156u8, 140u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.implementation,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1967NonPayable()` and selector `0xb398979f`.
```solidity
error ERC1967NonPayable();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1967NonPayable {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1967NonPayable> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1967NonPayable) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1967NonPayable {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1967NonPayable {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1967NonPayable()";
            const SELECTOR: [u8; 4] = [179u8, 152u8, 151u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FailedCall()` and selector `0xd6bda275`.
```solidity
error FailedCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FailedCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FailedCall> for UnderlyingRustTuple<'_> {
            fn from(value: FailedCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FailedCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FailedCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FailedCall()";
            const SELECTOR: [u8; 4] = [214u8, 189u8, 162u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FheParamsAlreadyInitialized(string)` and selector `0xbcdf9993`.
```solidity
error FheParamsAlreadyInitialized(string fheParamsName);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FheParamsAlreadyInitialized {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FheParamsAlreadyInitialized>
        for UnderlyingRustTuple<'_> {
            fn from(value: FheParamsAlreadyInitialized) -> Self {
                (value.fheParamsName,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for FheParamsAlreadyInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { fheParamsName: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FheParamsAlreadyInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FheParamsAlreadyInitialized(string)";
            const SELECTOR: [u8; 4] = [188u8, 223u8, 153u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `FheParamsNotInitialized()` and selector `0x7dcd17f9`.
```solidity
error FheParamsNotInitialized();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct FheParamsNotInitialized {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FheParamsNotInitialized> for UnderlyingRustTuple<'_> {
            fn from(value: FheParamsNotInitialized) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FheParamsNotInitialized {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FheParamsNotInitialized {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FheParamsNotInitialized()";
            const SELECTOR: [u8; 4] = [125u8, 205u8, 23u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidInitialization()` and selector `0xf92ee8a9`.
```solidity
error InvalidInitialization();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidInitialization {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidInitialization> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidInitialization) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidInitialization {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidInitialization {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidInitialization()";
            const SELECTOR: [u8; 4] = [249u8, 46u8, 232u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `KeygenKmsNodeAlreadyResponded(uint256)` and selector `0x0300a3a9`.
```solidity
error KeygenKmsNodeAlreadyResponded(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KeygenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KeygenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: KeygenKmsNodeAlreadyResponded) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KeygenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KeygenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KeygenKmsNodeAlreadyResponded(uint256)";
            const SELECTOR: [u8; 4] = [3u8, 0u8, 163u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
        }
    };
    /**Custom error with signature `KeygenPreprocessingRequired(uint256)` and selector `0xbea1ca4c`.
```solidity
error KeygenPreprocessingRequired(uint256 preKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KeygenPreprocessingRequired {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KeygenPreprocessingRequired>
        for UnderlyingRustTuple<'_> {
            fn from(value: KeygenPreprocessingRequired) -> Self {
                (value.preKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KeygenPreprocessingRequired {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KeygenPreprocessingRequired {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KeygenPreprocessingRequired(uint256)";
            const SELECTOR: [u8; 4] = [190u8, 161u8, 202u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
        }
    };
    /**Custom error with signature `KeygenRequestAlreadySent(uint256)` and selector `0x5bf84e11`.
```solidity
error KeygenRequestAlreadySent(uint256 preKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KeygenRequestAlreadySent {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KeygenRequestAlreadySent>
        for UnderlyingRustTuple<'_> {
            fn from(value: KeygenRequestAlreadySent) -> Self {
                (value.preKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KeygenRequestAlreadySent {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KeygenRequestAlreadySent {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KeygenRequestAlreadySent(uint256)";
            const SELECTOR: [u8; 4] = [91u8, 248u8, 78u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
        }
    };
    /**Custom error with signature `KskgenDestKeyNotGenerated(uint256)` and selector `0x2800229d`.
```solidity
error KskgenDestKeyNotGenerated(uint256 destKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenDestKeyNotGenerated {
        #[allow(missing_docs)]
        pub destKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenDestKeyNotGenerated>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenDestKeyNotGenerated) -> Self {
                (value.destKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenDestKeyNotGenerated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { destKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenDestKeyNotGenerated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenDestKeyNotGenerated(uint256)";
            const SELECTOR: [u8; 4] = [40u8, 0u8, 34u8, 157u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.destKeyId),
                )
            }
        }
    };
    /**Custom error with signature `KskgenKmsNodeAlreadyResponded(uint256)` and selector `0xcfa5f2bb`.
```solidity
error KskgenKmsNodeAlreadyResponded(uint256 kskId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenKmsNodeAlreadyResponded) -> Self {
                (value.kskId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { kskId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenKmsNodeAlreadyResponded(uint256)";
            const SELECTOR: [u8; 4] = [207u8, 165u8, 242u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                )
            }
        }
    };
    /**Custom error with signature `KskgenPreprocessingRequired(uint256)` and selector `0xbe48e7d0`.
```solidity
error KskgenPreprocessingRequired(uint256 preKskId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenPreprocessingRequired {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenPreprocessingRequired>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenPreprocessingRequired) -> Self {
                (value.preKskId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenPreprocessingRequired {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKskId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenPreprocessingRequired {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenPreprocessingRequired(uint256)";
            const SELECTOR: [u8; 4] = [190u8, 72u8, 231u8, 208u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
        }
    };
    /**Custom error with signature `KskgenRequestAlreadySent(uint256)` and selector `0x49cbbf34`.
```solidity
error KskgenRequestAlreadySent(uint256 preKskId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenRequestAlreadySent {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenRequestAlreadySent>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenRequestAlreadySent) -> Self {
                (value.preKskId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenRequestAlreadySent {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKskId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenRequestAlreadySent {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenRequestAlreadySent(uint256)";
            const SELECTOR: [u8; 4] = [73u8, 203u8, 191u8, 52u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
        }
    };
    /**Custom error with signature `KskgenSameSrcAndDestKeyIds(uint256)` and selector `0xd6f4a687`.
```solidity
error KskgenSameSrcAndDestKeyIds(uint256 keyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenSameSrcAndDestKeyIds {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenSameSrcAndDestKeyIds>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenSameSrcAndDestKeyIds) -> Self {
                (value.keyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenSameSrcAndDestKeyIds {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { keyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenSameSrcAndDestKeyIds {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenSameSrcAndDestKeyIds(uint256)";
            const SELECTOR: [u8; 4] = [214u8, 244u8, 166u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
        }
    };
    /**Custom error with signature `KskgenSourceKeyNotGenerated(uint256)` and selector `0x05fc6161`.
```solidity
error KskgenSourceKeyNotGenerated(uint256 sourceKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct KskgenSourceKeyNotGenerated {
        #[allow(missing_docs)]
        pub sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<KskgenSourceKeyNotGenerated>
        for UnderlyingRustTuple<'_> {
            fn from(value: KskgenSourceKeyNotGenerated) -> Self {
                (value.sourceKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for KskgenSourceKeyNotGenerated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sourceKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for KskgenSourceKeyNotGenerated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "KskgenSourceKeyNotGenerated(uint256)";
            const SELECTOR: [u8; 4] = [5u8, 252u8, 97u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sourceKeyId),
                )
            }
        }
    };
    /**Custom error with signature `NotInitializing()` and selector `0xd7e6bcf8`.
```solidity
error NotInitializing();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotInitializing {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotInitializing> for UnderlyingRustTuple<'_> {
            fn from(value: NotInitializing) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotInitializing {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotInitializing {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotInitializing()";
            const SELECTOR: [u8; 4] = [215u8, 230u8, 188u8, 248u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `PreprocessKeygenKmsNodeAlreadyResponded(uint256)` and selector `0x609e5a30`.
```solidity
error PreprocessKeygenKmsNodeAlreadyResponded(uint256 preKeyId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PreprocessKeygenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PreprocessKeygenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: PreprocessKeygenKmsNodeAlreadyResponded) -> Self {
                (value.preKeyId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for PreprocessKeygenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKeyId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PreprocessKeygenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PreprocessKeygenKmsNodeAlreadyResponded(uint256)";
            const SELECTOR: [u8; 4] = [96u8, 158u8, 90u8, 48u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
        }
    };
    /**Custom error with signature `PreprocessKskgenKmsNodeAlreadyResponded(uint256)` and selector `0x00391dd6`.
```solidity
error PreprocessKskgenKmsNodeAlreadyResponded(uint256 preKskId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct PreprocessKskgenKmsNodeAlreadyResponded {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PreprocessKskgenKmsNodeAlreadyResponded>
        for UnderlyingRustTuple<'_> {
            fn from(value: PreprocessKskgenKmsNodeAlreadyResponded) -> Self {
                (value.preKskId,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for PreprocessKskgenKmsNodeAlreadyResponded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { preKskId: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for PreprocessKskgenKmsNodeAlreadyResponded {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "PreprocessKskgenKmsNodeAlreadyResponded(uint256)";
            const SELECTOR: [u8; 4] = [0u8, 57u8, 29u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
        }
    };
    /**Custom error with signature `UUPSUnauthorizedCallContext()` and selector `0xe07c8dba`.
```solidity
error UUPSUnauthorizedCallContext();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnauthorizedCallContext {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnauthorizedCallContext>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnauthorizedCallContext) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnauthorizedCallContext {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnauthorizedCallContext {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnauthorizedCallContext()";
            const SELECTOR: [u8; 4] = [224u8, 124u8, 141u8, 186u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `UUPSUnsupportedProxiableUUID(bytes32)` and selector `0xaa1d49a4`.
```solidity
error UUPSUnsupportedProxiableUUID(bytes32 slot);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UUPSUnsupportedProxiableUUID {
        #[allow(missing_docs)]
        pub slot: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UUPSUnsupportedProxiableUUID>
        for UnderlyingRustTuple<'_> {
            fn from(value: UUPSUnsupportedProxiableUUID) -> Self {
                (value.slot,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for UUPSUnsupportedProxiableUUID {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { slot: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for UUPSUnsupportedProxiableUUID {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UUPSUnsupportedProxiableUUID(bytes32)";
            const SELECTOR: [u8; 4] = [170u8, 29u8, 73u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot),
                )
            }
        }
    };
    /**Event with signature `ActivateKeyRequest(uint256)` and selector `0xbddc1662cdaa871ae40d9edc0e435e0988c6095bfc7c452aedb16c89606b6b75`.
```solidity
event ActivateKeyRequest(uint256 keyId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateKeyRequest {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateKeyRequest {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateKeyRequest(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                189u8,
                220u8,
                22u8,
                98u8,
                205u8,
                170u8,
                135u8,
                26u8,
                228u8,
                13u8,
                158u8,
                220u8,
                14u8,
                67u8,
                94u8,
                9u8,
                136u8,
                198u8,
                9u8,
                91u8,
                252u8,
                124u8,
                69u8,
                42u8,
                237u8,
                177u8,
                108u8,
                137u8,
                96u8,
                107u8,
                107u8,
                117u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { keyId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateKeyRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateKeyRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ActivateKeyRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ActivateKeyResponse(uint256)` and selector `0x7066963379f0648a6475860de4447aec0b04c03db5bc169b401c88d16ff6578d`.
```solidity
event ActivateKeyResponse(uint256 keyId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ActivateKeyResponse {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ActivateKeyResponse {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ActivateKeyResponse(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                112u8,
                102u8,
                150u8,
                51u8,
                121u8,
                240u8,
                100u8,
                138u8,
                100u8,
                117u8,
                134u8,
                13u8,
                228u8,
                68u8,
                122u8,
                236u8,
                11u8,
                4u8,
                192u8,
                61u8,
                181u8,
                188u8,
                22u8,
                155u8,
                64u8,
                28u8,
                136u8,
                209u8,
                111u8,
                246u8,
                87u8,
                141u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { keyId: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ActivateKeyResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ActivateKeyResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ActivateKeyResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `AddFheParams(string,bytes32)` and selector `0xe63dba14ba216c43efbd6e0206cd2172a4a64f894c8faf004691aa6f88fecada`.
```solidity
event AddFheParams(string fheParamsName, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct AddFheParams {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for AddFheParams {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "AddFheParams(string,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                230u8,
                61u8,
                186u8,
                20u8,
                186u8,
                33u8,
                108u8,
                67u8,
                239u8,
                189u8,
                110u8,
                2u8,
                6u8,
                205u8,
                33u8,
                114u8,
                164u8,
                166u8,
                79u8,
                137u8,
                76u8,
                143u8,
                175u8,
                0u8,
                70u8,
                145u8,
                170u8,
                111u8,
                136u8,
                254u8,
                202u8,
                218u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    fheParamsName: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for AddFheParams {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&AddFheParams> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &AddFheParams) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CrsgenRequest(uint256,bytes32)` and selector `0x04f7b6ae222ef47289cfdc7c3b8298273e1bc92eeb346e805163ed4b37e76b29`.
```solidity
event CrsgenRequest(uint256 crsgenRequestId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrsgenRequest {
        #[allow(missing_docs)]
        pub crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrsgenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CrsgenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                4u8,
                247u8,
                182u8,
                174u8,
                34u8,
                46u8,
                244u8,
                114u8,
                137u8,
                207u8,
                220u8,
                124u8,
                59u8,
                130u8,
                152u8,
                39u8,
                62u8,
                27u8,
                201u8,
                46u8,
                235u8,
                52u8,
                110u8,
                128u8,
                81u8,
                99u8,
                237u8,
                75u8,
                55u8,
                231u8,
                107u8,
                41u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    crsgenRequestId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsgenRequestId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrsgenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrsgenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrsgenRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `CrsgenResponse(uint256,uint256,bytes32)` and selector `0x95c123ae3e63573231605272667e1410a9e3c618227ff509e3c6a152c664b3a2`.
```solidity
event CrsgenResponse(uint256 crsgenRequestId, uint256 crsId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct CrsgenResponse {
        #[allow(missing_docs)]
        pub crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for CrsgenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "CrsgenResponse(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                149u8,
                193u8,
                35u8,
                174u8,
                62u8,
                99u8,
                87u8,
                50u8,
                49u8,
                96u8,
                82u8,
                114u8,
                102u8,
                126u8,
                20u8,
                16u8,
                169u8,
                227u8,
                198u8,
                24u8,
                34u8,
                127u8,
                245u8,
                9u8,
                227u8,
                198u8,
                161u8,
                82u8,
                198u8,
                100u8,
                179u8,
                162u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    crsgenRequestId: data.0,
                    crsId: data.1,
                    fheParamsDigest: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsgenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for CrsgenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&CrsgenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &CrsgenResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Initialized(uint64)` and selector `0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2`.
```solidity
event Initialized(uint64 version);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Initialized {
        #[allow(missing_docs)]
        pub version: u64,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Initialized {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "Initialized(uint64)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { version: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.version),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Initialized {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Initialized> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Initialized) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `KeygenRequest(uint256,bytes32)` and selector `0x796482d60009a80331529afb48bf3415a16c9ff539a8cd138e77a745af6c7b78`.
```solidity
event KeygenRequest(uint256 preKeyId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeygenRequest {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeygenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeygenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                121u8,
                100u8,
                130u8,
                214u8,
                0u8,
                9u8,
                168u8,
                3u8,
                49u8,
                82u8,
                154u8,
                251u8,
                72u8,
                191u8,
                52u8,
                21u8,
                161u8,
                108u8,
                159u8,
                245u8,
                57u8,
                168u8,
                205u8,
                19u8,
                142u8,
                119u8,
                167u8,
                69u8,
                175u8,
                108u8,
                123u8,
                120u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeyId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeygenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeygenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeygenRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `KeygenResponse(uint256,uint256,bytes32)` and selector `0xbc9d79366dad6b972d61e3f1567ee2f1e24c0ce10c72dcfb1452ee3b35c8d13e`.
```solidity
event KeygenResponse(uint256 preKeyId, uint256 keygenId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KeygenResponse {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub keygenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KeygenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KeygenResponse(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8,
                157u8,
                121u8,
                54u8,
                109u8,
                173u8,
                107u8,
                151u8,
                45u8,
                97u8,
                227u8,
                241u8,
                86u8,
                126u8,
                226u8,
                241u8,
                226u8,
                76u8,
                12u8,
                225u8,
                12u8,
                114u8,
                220u8,
                251u8,
                20u8,
                82u8,
                238u8,
                59u8,
                53u8,
                200u8,
                209u8,
                62u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeyId: data.0,
                    keygenId: data.1,
                    fheParamsDigest: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keygenId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KeygenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KeygenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KeygenResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `KskgenRequest(uint256,uint256,uint256,bytes32)` and selector `0xfd6857403eadbdc0c8b68b151bb46a31d6c352af79b065d472cbd77781514dd4`.
```solidity
event KskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KskgenRequest {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub destKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KskgenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KskgenRequest(uint256,uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                253u8,
                104u8,
                87u8,
                64u8,
                62u8,
                173u8,
                189u8,
                192u8,
                200u8,
                182u8,
                139u8,
                21u8,
                27u8,
                180u8,
                106u8,
                49u8,
                214u8,
                195u8,
                82u8,
                175u8,
                121u8,
                176u8,
                101u8,
                212u8,
                114u8,
                203u8,
                215u8,
                119u8,
                129u8,
                81u8,
                77u8,
                212u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskId: data.0,
                    sourceKeyId: data.1,
                    destKeyId: data.2,
                    fheParamsDigest: data.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sourceKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.destKeyId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KskgenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KskgenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KskgenRequest) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `KskgenResponse(uint256,uint256,bytes32)` and selector `0xc607d1695840ce0dc9d24a547edaec485e01e5939a540c2e4c23e360e2243767`.
```solidity
event KskgenResponse(uint256 preKskId, uint256 kskId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct KskgenResponse {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for KskgenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "KskgenResponse(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                198u8,
                7u8,
                209u8,
                105u8,
                88u8,
                64u8,
                206u8,
                13u8,
                201u8,
                210u8,
                74u8,
                84u8,
                126u8,
                218u8,
                236u8,
                72u8,
                94u8,
                1u8,
                229u8,
                147u8,
                154u8,
                84u8,
                12u8,
                46u8,
                76u8,
                35u8,
                227u8,
                96u8,
                226u8,
                36u8,
                55u8,
                103u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskId: data.0,
                    kskId: data.1,
                    fheParamsDigest: data.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for KskgenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&KskgenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &KskgenResponse) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferStarted(address,address)` and selector `0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700`.
```solidity
event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferStarted {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferStarted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferStarted(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                56u8,
                209u8,
                107u8,
                140u8,
                172u8,
                34u8,
                217u8,
                159u8,
                199u8,
                193u8,
                36u8,
                185u8,
                205u8,
                13u8,
                226u8,
                211u8,
                250u8,
                31u8,
                174u8,
                244u8,
                32u8,
                191u8,
                231u8,
                145u8,
                216u8,
                195u8,
                98u8,
                215u8,
                101u8,
                226u8,
                39u8,
                0u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferStarted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferStarted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &OwnershipTransferStarted,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PreprocessKeygenRequest(uint256,bytes32)` and selector `0x8511337ad89c20ef904f13e9b9e7eb05f4c0fff128a8760c2c1d436c111b309f`.
```solidity
event PreprocessKeygenRequest(uint256 preKeyRequestId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKeygenRequest {
        #[allow(missing_docs)]
        pub preKeyRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKeygenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKeygenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                133u8,
                17u8,
                51u8,
                122u8,
                216u8,
                156u8,
                32u8,
                239u8,
                144u8,
                79u8,
                19u8,
                233u8,
                185u8,
                231u8,
                235u8,
                5u8,
                244u8,
                192u8,
                255u8,
                241u8,
                40u8,
                168u8,
                118u8,
                12u8,
                44u8,
                29u8,
                67u8,
                108u8,
                17u8,
                27u8,
                48u8,
                159u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeyRequestId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyRequestId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKeygenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKeygenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKeygenRequest,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PreprocessKeygenResponse(uint256,uint256)` and selector `0x4187011e59171694872e08b3d3cdd3c901567aa0e38aaa6dbb4368837c1e8e34`.
```solidity
event PreprocessKeygenResponse(uint256 preKeyRequestId, uint256 preKeyId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKeygenResponse {
        #[allow(missing_docs)]
        pub preKeyRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKeygenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKeygenResponse(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                65u8,
                135u8,
                1u8,
                30u8,
                89u8,
                23u8,
                22u8,
                148u8,
                135u8,
                46u8,
                8u8,
                179u8,
                211u8,
                205u8,
                211u8,
                201u8,
                1u8,
                86u8,
                122u8,
                160u8,
                227u8,
                138u8,
                170u8,
                109u8,
                187u8,
                67u8,
                104u8,
                131u8,
                124u8,
                30u8,
                142u8,
                52u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKeyRequestId: data.0,
                    preKeyId: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKeygenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKeygenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKeygenResponse,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PreprocessKskgenRequest(uint256,bytes32)` and selector `0x596d111e7512a47ee0c5eb66eef6f22c45d8ad4fee0520340785a11e221ed512`.
```solidity
event PreprocessKskgenRequest(uint256 preKskRequestId, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKskgenRequest {
        #[allow(missing_docs)]
        pub preKskRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKskgenRequest {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKskgenRequest(uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                89u8,
                109u8,
                17u8,
                30u8,
                117u8,
                18u8,
                164u8,
                126u8,
                224u8,
                197u8,
                235u8,
                102u8,
                238u8,
                246u8,
                242u8,
                44u8,
                69u8,
                216u8,
                173u8,
                79u8,
                238u8,
                5u8,
                32u8,
                52u8,
                7u8,
                133u8,
                161u8,
                30u8,
                34u8,
                30u8,
                213u8,
                18u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskRequestId: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskRequestId),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKskgenRequest {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKskgenRequest> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKskgenRequest,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `PreprocessKskgenResponse(uint256,uint256)` and selector `0x76863545735c29cf1c7ebb0028e734d1d738d2a5d099ba8b529c1793354ae312`.
```solidity
event PreprocessKskgenResponse(uint256 preKskRequestId, uint256 preKskId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PreprocessKskgenResponse {
        #[allow(missing_docs)]
        pub preKskRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PreprocessKskgenResponse {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "PreprocessKskgenResponse(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                118u8,
                134u8,
                53u8,
                69u8,
                115u8,
                92u8,
                41u8,
                207u8,
                28u8,
                126u8,
                187u8,
                0u8,
                40u8,
                231u8,
                52u8,
                209u8,
                215u8,
                56u8,
                210u8,
                165u8,
                208u8,
                153u8,
                186u8,
                139u8,
                82u8,
                156u8,
                23u8,
                147u8,
                53u8,
                74u8,
                227u8,
                18u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    preKskRequestId: data.0,
                    preKskId: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PreprocessKskgenResponse {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PreprocessKskgenResponse> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &PreprocessKskgenResponse,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `UpdateFheParams(string,bytes32)` and selector `0xf0bb05ed11b11e9a83db1fdfdb364ce1579b1bb34d4080b670b5794692079e3d`.
```solidity
event UpdateFheParams(string fheParamsName, bytes32 fheParamsDigest);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct UpdateFheParams {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for UpdateFheParams {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "UpdateFheParams(string,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                240u8,
                187u8,
                5u8,
                237u8,
                17u8,
                177u8,
                30u8,
                154u8,
                131u8,
                219u8,
                31u8,
                223u8,
                219u8,
                54u8,
                76u8,
                225u8,
                87u8,
                155u8,
                27u8,
                179u8,
                77u8,
                64u8,
                128u8,
                182u8,
                112u8,
                181u8,
                121u8,
                70u8,
                146u8,
                7u8,
                158u8,
                61u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    fheParamsName: data.0,
                    fheParamsDigest: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for UpdateFheParams {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&UpdateFheParams> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &UpdateFheParams) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Upgraded(address)` and selector `0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b`.
```solidity
event Upgraded(address indexed implementation);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Upgraded {
        #[allow(missing_docs)]
        pub implementation: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Upgraded {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "Upgraded(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                188u8,
                124u8,
                215u8,
                90u8,
                32u8,
                238u8,
                39u8,
                253u8,
                154u8,
                222u8,
                186u8,
                179u8,
                32u8,
                65u8,
                247u8,
                85u8,
                33u8,
                77u8,
                188u8,
                107u8,
                255u8,
                169u8,
                12u8,
                192u8,
                34u8,
                91u8,
                57u8,
                218u8,
                46u8,
                92u8,
                45u8,
                59u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { implementation: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.implementation.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.implementation,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Upgraded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Upgraded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Upgraded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {}
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Function with signature `UPGRADE_INTERFACE_VERSION()` and selector `0xad3cb1cc`.
```solidity
function UPGRADE_INTERFACE_VERSION() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONCall {}
    ///Container type for the return parameters of the [`UPGRADE_INTERFACE_VERSION()`](UPGRADE_INTERFACE_VERSIONCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct UPGRADE_INTERFACE_VERSIONReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UPGRADE_INTERFACE_VERSIONReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: UPGRADE_INTERFACE_VERSIONReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for UPGRADE_INTERFACE_VERSIONReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for UPGRADE_INTERFACE_VERSIONCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = UPGRADE_INTERFACE_VERSIONReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "UPGRADE_INTERFACE_VERSION()";
            const SELECTOR: [u8; 4] = [173u8, 60u8, 177u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `acceptOwnership()` and selector `0x79ba5097`.
```solidity
function acceptOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptOwnershipCall {}
    ///Container type for the return parameters of the [`acceptOwnership()`](acceptOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct acceptOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptOwnershipCall> for UnderlyingRustTuple<'_> {
                fn from(value: acceptOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for acceptOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<acceptOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: acceptOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for acceptOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for acceptOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = acceptOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "acceptOwnership()";
            const SELECTOR: [u8; 4] = [121u8, 186u8, 80u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activateKeyRequest(uint256)` and selector `0x9e167f76`.
```solidity
function activateKeyRequest(uint256 keyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyRequestCall {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`activateKeyRequest(uint256)`](activateKeyRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyRequestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyRequestCall) -> Self {
                    (value.keyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyRequestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activateKeyRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activateKeyRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activateKeyRequest(uint256)";
            const SELECTOR: [u8; 4] = [158u8, 22u8, 127u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activateKeyResponse(uint256)` and selector `0x3b41a6dd`.
```solidity
function activateKeyResponse(uint256 keyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyResponseCall {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`activateKeyResponse(uint256)`](activateKeyResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activateKeyResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyResponseCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyResponseCall) -> Self {
                    (value.keyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activateKeyResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activateKeyResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activateKeyResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activateKeyResponseCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activateKeyResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activateKeyResponse(uint256)";
            const SELECTOR: [u8; 4] = [59u8, 65u8, 166u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `activatedKeyIds(uint256)` and selector `0x622c078f`.
```solidity
function activatedKeyIds(uint256 index) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activatedKeyIdsCall {
        #[allow(missing_docs)]
        pub index: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`activatedKeyIds(uint256)`](activatedKeyIdsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct activatedKeyIdsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activatedKeyIdsCall> for UnderlyingRustTuple<'_> {
                fn from(value: activatedKeyIdsCall) -> Self {
                    (value.index,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for activatedKeyIdsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<activatedKeyIdsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: activatedKeyIdsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for activatedKeyIdsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for activatedKeyIdsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = activatedKeyIdsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "activatedKeyIds(uint256)";
            const SELECTOR: [u8; 4] = [98u8, 44u8, 7u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `addFheParams(string,bytes32)` and selector `0xa7ab4440`.
```solidity
function addFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addFheParamsCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`addFheParams(string,bytes32)`](addFheParamsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addFheParamsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addFheParamsCall> for UnderlyingRustTuple<'_> {
                fn from(value: addFheParamsCall) -> Self {
                    (value.fheParamsName, value.fheParamsDigest)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addFheParamsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fheParamsName: tuple.0,
                        fheParamsDigest: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addFheParamsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addFheParamsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addFheParamsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addFheParamsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = addFheParamsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addFheParams(string,bytes32)";
            const SELECTOR: [u8; 4] = [167u8, 171u8, 68u8, 64u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crsFheParamsDigests(uint256)` and selector `0xeed01e7d`.
```solidity
function crsFheParamsDigests(uint256 crsId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsFheParamsDigestsCall {
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`crsFheParamsDigests(uint256)`](crsFheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsFheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsFheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: crsFheParamsDigestsCall) -> Self {
                    (value.crsId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crsFheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { crsId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsFheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crsFheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crsFheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crsFheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crsFheParamsDigestsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crsFheParamsDigests(uint256)";
            const SELECTOR: [u8; 4] = [238u8, 208u8, 30u8, 125u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crsgenRequest(string)` and selector `0x6532745f`.
```solidity
function crsgenRequest(string memory fheParamsName) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenRequestCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`crsgenRequest(string)`](crsgenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenRequestCall> for UnderlyingRustTuple<'_> {
                fn from(value: crsgenRequestCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crsgenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenRequestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: crsgenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crsgenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crsgenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crsgenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crsgenRequest(string)";
            const SELECTOR: [u8; 4] = [101u8, 50u8, 116u8, 95u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crsgenResponse(uint256,uint256)` and selector `0x40c24f15`.
```solidity
function crsgenResponse(uint256 crsgenRequestId, uint256 crsId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenResponseCall {
        #[allow(missing_docs)]
        pub crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub crsId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`crsgenResponse(uint256,uint256)`](crsgenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crsgenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenResponseCall> for UnderlyingRustTuple<'_> {
                fn from(value: crsgenResponseCall) -> Self {
                    (value.crsgenRequestId, value.crsId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for crsgenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        crsgenRequestId: tuple.0,
                        crsId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crsgenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crsgenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crsgenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crsgenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crsgenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crsgenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [64u8, 194u8, 79u8, 21u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsgenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.crsId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `fheParamsDigests(string)` and selector `0x45e3b193`.
```solidity
function fheParamsDigests(string memory fheParamsName) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fheParamsDigestsCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`fheParamsDigests(string)`](fheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct fheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: fheParamsDigestsCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<fheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: fheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for fheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for fheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = fheParamsDigestsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "fheParamsDigests(string)";
            const SELECTOR: [u8; 4] = [69u8, 227u8, 177u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getCurrentKeyId()` and selector `0xd8909eab`.
```solidity
function getCurrentKeyId() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentKeyIdCall {}
    ///Container type for the return parameters of the [`getCurrentKeyId()`](getCurrentKeyIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCurrentKeyIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentKeyIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentKeyIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCurrentKeyIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCurrentKeyIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getCurrentKeyIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getCurrentKeyIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCurrentKeyIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getCurrentKeyIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getCurrentKeyId()";
            const SELECTOR: [u8; 4] = [216u8, 144u8, 158u8, 171u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getVersion()` and selector `0x0d8e6e2c`.
```solidity
function getVersion() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionCall {}
    ///Container type for the return parameters of the [`getVersion()`](getVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getVersionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getVersionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getVersionReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getVersion()";
            const SELECTOR: [u8; 4] = [13u8, 142u8, 110u8, 44u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `initialize(string,bytes32)` and selector `0x8b4f7b3b`.
```solidity
function initialize(string memory fheParamsName, bytes32 fheParamsDigest) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`initialize(string,bytes32)`](initializeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct initializeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeCall> for UnderlyingRustTuple<'_> {
                fn from(value: initializeCall) -> Self {
                    (value.fheParamsName, value.fheParamsDigest)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fheParamsName: tuple.0,
                        fheParamsDigest: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<initializeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: initializeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for initializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for initializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = initializeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "initialize(string,bytes32)";
            const SELECTOR: [u8; 4] = [139u8, 79u8, 123u8, 59u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isCurrentKeyId(uint256)` and selector `0x9f8ec91c`.
```solidity
function isCurrentKeyId(uint256 keyId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCurrentKeyIdCall {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`isCurrentKeyId(uint256)`](isCurrentKeyIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isCurrentKeyIdReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCurrentKeyIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: isCurrentKeyIdCall) -> Self {
                    (value.keyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for isCurrentKeyIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isCurrentKeyIdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isCurrentKeyIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isCurrentKeyIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isCurrentKeyIdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isCurrentKeyIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isCurrentKeyId(uint256)";
            const SELECTOR: [u8; 4] = [159u8, 142u8, 201u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `keyFheParamsDigests(uint256)` and selector `0x8af77f03`.
```solidity
function keyFheParamsDigests(uint256 keyId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keyFheParamsDigestsCall {
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`keyFheParamsDigests(uint256)`](keyFheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keyFheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keyFheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: keyFheParamsDigestsCall) -> Self {
                    (value.keyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for keyFheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { keyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keyFheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: keyFheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for keyFheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for keyFheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = keyFheParamsDigestsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "keyFheParamsDigests(uint256)";
            const SELECTOR: [u8; 4] = [138u8, 247u8, 127u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `keygenRequest(uint256)` and selector `0xe0e55fd7`.
```solidity
function keygenRequest(uint256 preKeyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenRequestCall {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`keygenRequest(uint256)`](keygenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenRequestCall> for UnderlyingRustTuple<'_> {
                fn from(value: keygenRequestCall) -> Self {
                    (value.preKeyId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keygenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { preKeyId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenRequestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: keygenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keygenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for keygenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = keygenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "keygenRequest(uint256)";
            const SELECTOR: [u8; 4] = [224u8, 229u8, 95u8, 215u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `keygenResponse(uint256,uint256)` and selector `0x6aafa976`.
```solidity
function keygenResponse(uint256 preKeyId, uint256 keyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenResponseCall {
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub keyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`keygenResponse(uint256,uint256)`](keygenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct keygenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenResponseCall> for UnderlyingRustTuple<'_> {
                fn from(value: keygenResponseCall) -> Self {
                    (value.preKeyId, value.keyId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for keygenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKeyId: tuple.0,
                        keyId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<keygenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: keygenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for keygenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for keygenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = keygenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "keygenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [106u8, 175u8, 169u8, 118u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.keyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `kskFheParamsDigests(uint256)` and selector `0xf1244c5d`.
```solidity
function kskFheParamsDigests(uint256 kskId) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskFheParamsDigestsCall {
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`kskFheParamsDigests(uint256)`](kskFheParamsDigestsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskFheParamsDigestsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskFheParamsDigestsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: kskFheParamsDigestsCall) -> Self {
                    (value.kskId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for kskFheParamsDigestsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { kskId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskFheParamsDigestsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: kskFheParamsDigestsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for kskFheParamsDigestsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for kskFheParamsDigestsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = kskFheParamsDigestsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "kskFheParamsDigests(uint256)";
            const SELECTOR: [u8; 4] = [241u8, 36u8, 76u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `kskgenRequest(uint256,uint256,uint256)` and selector `0x394c7bd6`.
```solidity
function kskgenRequest(uint256 preKskId, uint256 sourceKeyId, uint256 destKeyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenRequestCall {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub destKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`kskgenRequest(uint256,uint256,uint256)`](kskgenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenRequestCall> for UnderlyingRustTuple<'_> {
                fn from(value: kskgenRequestCall) -> Self {
                    (value.preKskId, value.sourceKeyId, value.destKeyId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for kskgenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKskId: tuple.0,
                        sourceKeyId: tuple.1,
                        destKeyId: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenRequestReturn> for UnderlyingRustTuple<'_> {
                fn from(value: kskgenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for kskgenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for kskgenRequestCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = kskgenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "kskgenRequest(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [57u8, 76u8, 123u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.sourceKeyId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.destKeyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `kskgenResponse(uint256,uint256)` and selector `0x9594a901`.
```solidity
function kskgenResponse(uint256 preKskId, uint256 kskId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenResponseCall {
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub kskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`kskgenResponse(uint256,uint256)`](kskgenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct kskgenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenResponseCall> for UnderlyingRustTuple<'_> {
                fn from(value: kskgenResponseCall) -> Self {
                    (value.preKskId, value.kskId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for kskgenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKskId: tuple.0,
                        kskId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<kskgenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: kskgenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for kskgenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for kskgenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = kskgenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "kskgenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [149u8, 148u8, 169u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.kskId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pendingOwner()` and selector `0xe30c3978`.
```solidity
function pendingOwner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingOwnerCall {}
    ///Container type for the return parameters of the [`pendingOwner()`](pendingOwnerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pendingOwnerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingOwnerCall> for UnderlyingRustTuple<'_> {
                fn from(value: pendingOwnerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pendingOwnerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pendingOwnerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pendingOwnerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pendingOwnerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pendingOwnerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pendingOwnerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pendingOwner()";
            const SELECTOR: [u8; 4] = [227u8, 12u8, 57u8, 120u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `preprocessKeygenRequest(string)` and selector `0x26739e7c`.
```solidity
function preprocessKeygenRequest(string memory fheParamsName) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenRequestCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`preprocessKeygenRequest(string)`](preprocessKeygenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenRequestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenRequestCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenRequestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKeygenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKeygenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKeygenRequest(string)";
            const SELECTOR: [u8; 4] = [38u8, 115u8, 158u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `preprocessKeygenResponse(uint256,uint256)` and selector `0xfaac73b4`.
```solidity
function preprocessKeygenResponse(uint256 preKeygenRequestId, uint256 preKeyId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenResponseCall {
        #[allow(missing_docs)]
        pub preKeygenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKeyId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`preprocessKeygenResponse(uint256,uint256)`](preprocessKeygenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKeygenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenResponseCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenResponseCall) -> Self {
                    (value.preKeygenRequestId, value.preKeyId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKeygenRequestId: tuple.0,
                        preKeyId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKeygenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKeygenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKeygenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKeygenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKeygenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKeygenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [250u8, 172u8, 115u8, 180u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeygenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKeyId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `preprocessKskgenRequest(string)` and selector `0x428e76d8`.
```solidity
function preprocessKskgenRequest(string memory fheParamsName) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenRequestCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`preprocessKskgenRequest(string)`](preprocessKskgenRequestCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenRequestReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenRequestCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenRequestCall) -> Self {
                    (value.fheParamsName,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenRequestCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { fheParamsName: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenRequestReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenRequestReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenRequestReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKskgenRequestCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKskgenRequestReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKskgenRequest(string)";
            const SELECTOR: [u8; 4] = [66u8, 142u8, 118u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `preprocessKskgenResponse(uint256,uint256)` and selector `0x941c8df6`.
```solidity
function preprocessKskgenResponse(uint256 preKskgenRequestId, uint256 preKskId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenResponseCall {
        #[allow(missing_docs)]
        pub preKskgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub preKskId: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`preprocessKskgenResponse(uint256,uint256)`](preprocessKskgenResponseCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct preprocessKskgenResponseReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenResponseCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenResponseCall) -> Self {
                    (value.preKskgenRequestId, value.preKskId)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenResponseCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        preKskgenRequestId: tuple.0,
                        preKskId: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<preprocessKskgenResponseReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: preprocessKskgenResponseReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for preprocessKskgenResponseReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for preprocessKskgenResponseCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = preprocessKskgenResponseReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "preprocessKskgenResponse(uint256,uint256)";
            const SELECTOR: [u8; 4] = [148u8, 28u8, 141u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskgenRequestId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.preKskId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proxiableUUID()` and selector `0x52d1902d`.
```solidity
function proxiableUUID() external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDCall {}
    ///Container type for the return parameters of the [`proxiableUUID()`](proxiableUUIDCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxiableUUIDReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxiableUUIDReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxiableUUIDReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxiableUUIDReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxiableUUIDCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proxiableUUIDReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxiableUUID()";
            const SELECTOR: [u8; 4] = [82u8, 209u8, 144u8, 45u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall {}
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `updateFheParams(string,bytes32)` and selector `0x293479b1`.
```solidity
function updateFheParams(string memory fheParamsName, bytes32 fheParamsDigest) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateFheParamsCall {
        #[allow(missing_docs)]
        pub fheParamsName: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`updateFheParams(string,bytes32)`](updateFheParamsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateFheParamsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateFheParamsCall> for UnderlyingRustTuple<'_> {
                fn from(value: updateFheParamsCall) -> Self {
                    (value.fheParamsName, value.fheParamsDigest)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for updateFheParamsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fheParamsName: tuple.0,
                        fheParamsDigest: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateFheParamsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateFheParamsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateFheParamsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateFheParamsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateFheParamsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateFheParams(string,bytes32)";
            const SELECTOR: [u8; 4] = [41u8, 52u8, 121u8, 177u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.fheParamsName,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.fheParamsDigest),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `upgradeToAndCall(address,bytes)` and selector `0x4f1ef286`.
```solidity
function upgradeToAndCall(address newImplementation, bytes memory data) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallCall {
        #[allow(missing_docs)]
        pub newImplementation: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`upgradeToAndCall(address,bytes)`](upgradeToAndCallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct upgradeToAndCallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallCall) -> Self {
                    (value.newImplementation, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        newImplementation: tuple.0,
                        data: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<upgradeToAndCallReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: upgradeToAndCallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for upgradeToAndCallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for upgradeToAndCallCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = upgradeToAndCallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "upgradeToAndCall(address,bytes)";
            const SELECTOR: [u8; 4] = [79u8, 30u8, 242u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newImplementation,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`KmsManagement`](self) function calls.
    pub enum KmsManagementCalls {
        #[allow(missing_docs)]
        UPGRADE_INTERFACE_VERSION(UPGRADE_INTERFACE_VERSIONCall),
        #[allow(missing_docs)]
        acceptOwnership(acceptOwnershipCall),
        #[allow(missing_docs)]
        activateKeyRequest(activateKeyRequestCall),
        #[allow(missing_docs)]
        activateKeyResponse(activateKeyResponseCall),
        #[allow(missing_docs)]
        activatedKeyIds(activatedKeyIdsCall),
        #[allow(missing_docs)]
        addFheParams(addFheParamsCall),
        #[allow(missing_docs)]
        crsFheParamsDigests(crsFheParamsDigestsCall),
        #[allow(missing_docs)]
        crsgenRequest(crsgenRequestCall),
        #[allow(missing_docs)]
        crsgenResponse(crsgenResponseCall),
        #[allow(missing_docs)]
        fheParamsDigests(fheParamsDigestsCall),
        #[allow(missing_docs)]
        getCurrentKeyId(getCurrentKeyIdCall),
        #[allow(missing_docs)]
        getVersion(getVersionCall),
        #[allow(missing_docs)]
        initialize(initializeCall),
        #[allow(missing_docs)]
        isCurrentKeyId(isCurrentKeyIdCall),
        #[allow(missing_docs)]
        keyFheParamsDigests(keyFheParamsDigestsCall),
        #[allow(missing_docs)]
        keygenRequest(keygenRequestCall),
        #[allow(missing_docs)]
        keygenResponse(keygenResponseCall),
        #[allow(missing_docs)]
        kskFheParamsDigests(kskFheParamsDigestsCall),
        #[allow(missing_docs)]
        kskgenRequest(kskgenRequestCall),
        #[allow(missing_docs)]
        kskgenResponse(kskgenResponseCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        pendingOwner(pendingOwnerCall),
        #[allow(missing_docs)]
        preprocessKeygenRequest(preprocessKeygenRequestCall),
        #[allow(missing_docs)]
        preprocessKeygenResponse(preprocessKeygenResponseCall),
        #[allow(missing_docs)]
        preprocessKskgenRequest(preprocessKskgenRequestCall),
        #[allow(missing_docs)]
        preprocessKskgenResponse(preprocessKskgenResponseCall),
        #[allow(missing_docs)]
        proxiableUUID(proxiableUUIDCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateFheParams(updateFheParamsCall),
        #[allow(missing_docs)]
        upgradeToAndCall(upgradeToAndCallCall),
    }
    #[automatically_derived]
    impl KmsManagementCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [13u8, 142u8, 110u8, 44u8],
            [38u8, 115u8, 158u8, 124u8],
            [41u8, 52u8, 121u8, 177u8],
            [57u8, 76u8, 123u8, 214u8],
            [59u8, 65u8, 166u8, 221u8],
            [64u8, 194u8, 79u8, 21u8],
            [66u8, 142u8, 118u8, 216u8],
            [69u8, 227u8, 177u8, 147u8],
            [79u8, 30u8, 242u8, 134u8],
            [82u8, 209u8, 144u8, 45u8],
            [98u8, 44u8, 7u8, 143u8],
            [101u8, 50u8, 116u8, 95u8],
            [106u8, 175u8, 169u8, 118u8],
            [113u8, 80u8, 24u8, 166u8],
            [121u8, 186u8, 80u8, 151u8],
            [138u8, 247u8, 127u8, 3u8],
            [139u8, 79u8, 123u8, 59u8],
            [141u8, 165u8, 203u8, 91u8],
            [148u8, 28u8, 141u8, 246u8],
            [149u8, 148u8, 169u8, 1u8],
            [158u8, 22u8, 127u8, 118u8],
            [159u8, 142u8, 201u8, 28u8],
            [167u8, 171u8, 68u8, 64u8],
            [173u8, 60u8, 177u8, 204u8],
            [216u8, 144u8, 158u8, 171u8],
            [224u8, 229u8, 95u8, 215u8],
            [227u8, 12u8, 57u8, 120u8],
            [238u8, 208u8, 30u8, 125u8],
            [241u8, 36u8, 76u8, 93u8],
            [242u8, 253u8, 227u8, 139u8],
            [250u8, 172u8, 115u8, 180u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for KmsManagementCalls {
        const NAME: &'static str = "KmsManagementCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 31usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(_) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::acceptOwnership(_) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activateKeyRequest(_) => {
                    <activateKeyRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activateKeyResponse(_) => {
                    <activateKeyResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::activatedKeyIds(_) => {
                    <activatedKeyIdsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::addFheParams(_) => {
                    <addFheParamsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crsFheParamsDigests(_) => {
                    <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crsgenRequest(_) => {
                    <crsgenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crsgenResponse(_) => {
                    <crsgenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::fheParamsDigests(_) => {
                    <fheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getCurrentKeyId(_) => {
                    <getCurrentKeyIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getVersion(_) => {
                    <getVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::initialize(_) => {
                    <initializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isCurrentKeyId(_) => {
                    <isCurrentKeyIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::keyFheParamsDigests(_) => {
                    <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::keygenRequest(_) => {
                    <keygenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::keygenResponse(_) => {
                    <keygenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::kskFheParamsDigests(_) => {
                    <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::kskgenRequest(_) => {
                    <kskgenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::kskgenResponse(_) => {
                    <kskgenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pendingOwner(_) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKeygenRequest(_) => {
                    <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKeygenResponse(_) => {
                    <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKskgenRequest(_) => {
                    <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::preprocessKskgenResponse(_) => {
                    <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proxiableUUID(_) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateFheParams(_) => {
                    <updateFheParamsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::upgradeToAndCall(_) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<KmsManagementCalls>] = &[
                {
                    fn getVersion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <getVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::getVersion)
                    }
                    getVersion
                },
                {
                    fn preprocessKeygenRequest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::preprocessKeygenRequest)
                    }
                    preprocessKeygenRequest
                },
                {
                    fn updateFheParams(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <updateFheParamsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::updateFheParams)
                    }
                    updateFheParams
                },
                {
                    fn kskgenRequest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::kskgenRequest)
                    }
                    kskgenRequest
                },
                {
                    fn activateKeyResponse(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activateKeyResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::activateKeyResponse)
                    }
                    activateKeyResponse
                },
                {
                    fn crsgenResponse(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::crsgenResponse)
                    }
                    crsgenResponse
                },
                {
                    fn preprocessKskgenRequest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::preprocessKskgenRequest)
                    }
                    preprocessKskgenRequest
                },
                {
                    fn fheParamsDigests(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <fheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::fheParamsDigests)
                    }
                    fheParamsDigests
                },
                {
                    fn upgradeToAndCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::upgradeToAndCall)
                    }
                    upgradeToAndCall
                },
                {
                    fn proxiableUUID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::proxiableUUID)
                    }
                    proxiableUUID
                },
                {
                    fn activatedKeyIds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activatedKeyIdsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::activatedKeyIds)
                    }
                    activatedKeyIds
                },
                {
                    fn crsgenRequest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsgenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::crsgenRequest)
                    }
                    crsgenRequest
                },
                {
                    fn keygenResponse(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keygenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::keygenResponse)
                    }
                    keygenResponse
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::renounceOwnership)
                    }
                    renounceOwnership
                },
                {
                    fn acceptOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::acceptOwnership)
                    }
                    acceptOwnership
                },
                {
                    fn keyFheParamsDigests(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::keyFheParamsDigests)
                    }
                    keyFheParamsDigests
                },
                {
                    fn initialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <initializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::initialize)
                    }
                    initialize
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::owner)
                    }
                    owner
                },
                {
                    fn preprocessKskgenResponse(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::preprocessKskgenResponse)
                    }
                    preprocessKskgenResponse
                },
                {
                    fn kskgenResponse(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskgenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::kskgenResponse)
                    }
                    kskgenResponse
                },
                {
                    fn activateKeyRequest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <activateKeyRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::activateKeyRequest)
                    }
                    activateKeyRequest
                },
                {
                    fn isCurrentKeyId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <isCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::isCurrentKeyId)
                    }
                    isCurrentKeyId
                },
                {
                    fn addFheParams(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <addFheParamsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::addFheParams)
                    }
                    addFheParams
                },
                {
                    fn UPGRADE_INTERFACE_VERSION(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::UPGRADE_INTERFACE_VERSION)
                    }
                    UPGRADE_INTERFACE_VERSION
                },
                {
                    fn getCurrentKeyId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <getCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::getCurrentKeyId)
                    }
                    getCurrentKeyId
                },
                {
                    fn keygenRequest(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <keygenRequestCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::keygenRequest)
                    }
                    keygenRequest
                },
                {
                    fn pendingOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <pendingOwnerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::pendingOwner)
                    }
                    pendingOwner
                },
                {
                    fn crsFheParamsDigests(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::crsFheParamsDigests)
                    }
                    crsFheParamsDigests
                },
                {
                    fn kskFheParamsDigests(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::kskFheParamsDigests)
                    }
                    kskFheParamsDigests
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::transferOwnership)
                    }
                    transferOwnership
                },
                {
                    fn preprocessKeygenResponse(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementCalls> {
                        <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementCalls::preprocessKeygenResponse)
                    }
                    preprocessKeygenResponse
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::acceptOwnership(inner) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::activateKeyRequest(inner) => {
                    <activateKeyRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::activateKeyResponse(inner) => {
                    <activateKeyResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::activatedKeyIds(inner) => {
                    <activatedKeyIdsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::addFheParams(inner) => {
                    <addFheParamsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crsFheParamsDigests(inner) => {
                    <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crsgenRequest(inner) => {
                    <crsgenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crsgenResponse(inner) => {
                    <crsgenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::fheParamsDigests(inner) => {
                    <fheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getCurrentKeyId(inner) => {
                    <getCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::isCurrentKeyId(inner) => {
                    <isCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::keyFheParamsDigests(inner) => {
                    <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::keygenRequest(inner) => {
                    <keygenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::keygenResponse(inner) => {
                    <keygenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::kskFheParamsDigests(inner) => {
                    <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::kskgenRequest(inner) => {
                    <kskgenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::kskgenResponse(inner) => {
                    <kskgenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pendingOwner(inner) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKeygenRequest(inner) => {
                    <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKeygenResponse(inner) => {
                    <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKskgenRequest(inner) => {
                    <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::preprocessKskgenResponse(inner) => {
                    <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateFheParams(inner) => {
                    <updateFheParamsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::UPGRADE_INTERFACE_VERSION(inner) => {
                    <UPGRADE_INTERFACE_VERSIONCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::acceptOwnership(inner) => {
                    <acceptOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activateKeyRequest(inner) => {
                    <activateKeyRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activateKeyResponse(inner) => {
                    <activateKeyResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::activatedKeyIds(inner) => {
                    <activatedKeyIdsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::addFheParams(inner) => {
                    <addFheParamsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crsFheParamsDigests(inner) => {
                    <crsFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crsgenRequest(inner) => {
                    <crsgenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crsgenResponse(inner) => {
                    <crsgenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::fheParamsDigests(inner) => {
                    <fheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getCurrentKeyId(inner) => {
                    <getCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getVersion(inner) => {
                    <getVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::initialize(inner) => {
                    <initializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isCurrentKeyId(inner) => {
                    <isCurrentKeyIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::keyFheParamsDigests(inner) => {
                    <keyFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::keygenRequest(inner) => {
                    <keygenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::keygenResponse(inner) => {
                    <keygenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::kskFheParamsDigests(inner) => {
                    <kskFheParamsDigestsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::kskgenRequest(inner) => {
                    <kskgenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::kskgenResponse(inner) => {
                    <kskgenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pendingOwner(inner) => {
                    <pendingOwnerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKeygenRequest(inner) => {
                    <preprocessKeygenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKeygenResponse(inner) => {
                    <preprocessKeygenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKskgenRequest(inner) => {
                    <preprocessKskgenRequestCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::preprocessKskgenResponse(inner) => {
                    <preprocessKskgenResponseCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxiableUUID(inner) => {
                    <proxiableUUIDCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateFheParams(inner) => {
                    <updateFheParamsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::upgradeToAndCall(inner) => {
                    <upgradeToAndCallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`KmsManagement`](self) custom errors.
    pub enum KmsManagementErrors {
        #[allow(missing_docs)]
        ActivateKeyKmsNodeAlreadyResponded(ActivateKeyKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        ActivateKeyRequestAlreadySent(ActivateKeyRequestAlreadySent),
        #[allow(missing_docs)]
        ActivateKeyRequiresKeygen(ActivateKeyRequiresKeygen),
        #[allow(missing_docs)]
        ActivateKeyRequiresKskgen(ActivateKeyRequiresKskgen),
        #[allow(missing_docs)]
        AddressEmptyCode(AddressEmptyCode),
        #[allow(missing_docs)]
        CrsgenKmsNodeAlreadyResponded(CrsgenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        ERC1967InvalidImplementation(ERC1967InvalidImplementation),
        #[allow(missing_docs)]
        ERC1967NonPayable(ERC1967NonPayable),
        #[allow(missing_docs)]
        FailedCall(FailedCall),
        #[allow(missing_docs)]
        FheParamsAlreadyInitialized(FheParamsAlreadyInitialized),
        #[allow(missing_docs)]
        FheParamsNotInitialized(FheParamsNotInitialized),
        #[allow(missing_docs)]
        InvalidInitialization(InvalidInitialization),
        #[allow(missing_docs)]
        KeygenKmsNodeAlreadyResponded(KeygenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        KeygenPreprocessingRequired(KeygenPreprocessingRequired),
        #[allow(missing_docs)]
        KeygenRequestAlreadySent(KeygenRequestAlreadySent),
        #[allow(missing_docs)]
        KskgenDestKeyNotGenerated(KskgenDestKeyNotGenerated),
        #[allow(missing_docs)]
        KskgenKmsNodeAlreadyResponded(KskgenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        KskgenPreprocessingRequired(KskgenPreprocessingRequired),
        #[allow(missing_docs)]
        KskgenRequestAlreadySent(KskgenRequestAlreadySent),
        #[allow(missing_docs)]
        KskgenSameSrcAndDestKeyIds(KskgenSameSrcAndDestKeyIds),
        #[allow(missing_docs)]
        KskgenSourceKeyNotGenerated(KskgenSourceKeyNotGenerated),
        #[allow(missing_docs)]
        NotInitializing(NotInitializing),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        PreprocessKeygenKmsNodeAlreadyResponded(PreprocessKeygenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        PreprocessKskgenKmsNodeAlreadyResponded(PreprocessKskgenKmsNodeAlreadyResponded),
        #[allow(missing_docs)]
        UUPSUnauthorizedCallContext(UUPSUnauthorizedCallContext),
        #[allow(missing_docs)]
        UUPSUnsupportedProxiableUUID(UUPSUnsupportedProxiableUUID),
    }
    #[automatically_derived]
    impl KmsManagementErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 57u8, 29u8, 214u8],
            [3u8, 0u8, 163u8, 169u8],
            [5u8, 252u8, 97u8, 97u8],
            [17u8, 140u8, 218u8, 167u8],
            [30u8, 79u8, 189u8, 247u8],
            [35u8, 189u8, 79u8, 211u8],
            [40u8, 0u8, 34u8, 157u8],
            [73u8, 203u8, 191u8, 52u8],
            [76u8, 156u8, 140u8, 227u8],
            [91u8, 248u8, 78u8, 17u8],
            [96u8, 158u8, 90u8, 48u8],
            [125u8, 205u8, 23u8, 249u8],
            [153u8, 150u8, 179u8, 21u8],
            [170u8, 29u8, 73u8, 164u8],
            [179u8, 152u8, 151u8, 159u8],
            [188u8, 223u8, 153u8, 147u8],
            [190u8, 72u8, 231u8, 208u8],
            [190u8, 161u8, 202u8, 76u8],
            [195u8, 230u8, 56u8, 230u8],
            [207u8, 165u8, 242u8, 187u8],
            [214u8, 189u8, 162u8, 117u8],
            [214u8, 244u8, 166u8, 135u8],
            [215u8, 230u8, 188u8, 248u8],
            [224u8, 124u8, 141u8, 186u8],
            [227u8, 179u8, 70u8, 9u8],
            [232u8, 84u8, 172u8, 40u8],
            [232u8, 124u8, 96u8, 124u8],
            [249u8, 46u8, 232u8, 169u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for KmsManagementErrors {
        const NAME: &'static str = "KmsManagementErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 28usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ActivateKeyKmsNodeAlreadyResponded(_) => {
                    <ActivateKeyKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ActivateKeyRequestAlreadySent(_) => {
                    <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ActivateKeyRequiresKeygen(_) => {
                    <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ActivateKeyRequiresKskgen(_) => {
                    <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::SELECTOR
                }
                Self::AddressEmptyCode(_) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::SELECTOR
                }
                Self::CrsgenKmsNodeAlreadyResponded(_) => {
                    <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967InvalidImplementation(_) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1967NonPayable(_) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FailedCall(_) => {
                    <FailedCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FheParamsAlreadyInitialized(_) => {
                    <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FheParamsNotInitialized(_) => {
                    <FheParamsNotInitialized as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidInitialization(_) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KeygenKmsNodeAlreadyResponded(_) => {
                    <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KeygenPreprocessingRequired(_) => {
                    <KeygenPreprocessingRequired as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KeygenRequestAlreadySent(_) => {
                    <KeygenRequestAlreadySent as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenDestKeyNotGenerated(_) => {
                    <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenKmsNodeAlreadyResponded(_) => {
                    <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenPreprocessingRequired(_) => {
                    <KskgenPreprocessingRequired as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenRequestAlreadySent(_) => {
                    <KskgenRequestAlreadySent as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenSameSrcAndDestKeyIds(_) => {
                    <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::SELECTOR
                }
                Self::KskgenSourceKeyNotGenerated(_) => {
                    <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotInitializing(_) => {
                    <NotInitializing as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PreprocessKeygenKmsNodeAlreadyResponded(_) => {
                    <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::PreprocessKskgenKmsNodeAlreadyResponded(_) => {
                    <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnauthorizedCallContext(_) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::SELECTOR
                }
                Self::UUPSUnsupportedProxiableUUID(_) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<KmsManagementErrors>] = &[
                {
                    fn PreprocessKskgenKmsNodeAlreadyResponded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                KmsManagementErrors::PreprocessKskgenKmsNodeAlreadyResponded,
                            )
                    }
                    PreprocessKskgenKmsNodeAlreadyResponded
                },
                {
                    fn KeygenKmsNodeAlreadyResponded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KeygenKmsNodeAlreadyResponded)
                    }
                    KeygenKmsNodeAlreadyResponded
                },
                {
                    fn KskgenSourceKeyNotGenerated(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KskgenSourceKeyNotGenerated)
                    }
                    KskgenSourceKeyNotGenerated
                },
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::OwnableUnauthorizedAccount)
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::OwnableInvalidOwner)
                    }
                    OwnableInvalidOwner
                },
                {
                    fn ActivateKeyRequestAlreadySent(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequestAlreadySent)
                    }
                    ActivateKeyRequestAlreadySent
                },
                {
                    fn KskgenDestKeyNotGenerated(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KskgenDestKeyNotGenerated)
                    }
                    KskgenDestKeyNotGenerated
                },
                {
                    fn KskgenRequestAlreadySent(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KskgenRequestAlreadySent)
                    }
                    KskgenRequestAlreadySent
                },
                {
                    fn ERC1967InvalidImplementation(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::ERC1967InvalidImplementation)
                    }
                    ERC1967InvalidImplementation
                },
                {
                    fn KeygenRequestAlreadySent(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenRequestAlreadySent as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KeygenRequestAlreadySent)
                    }
                    KeygenRequestAlreadySent
                },
                {
                    fn PreprocessKeygenKmsNodeAlreadyResponded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                KmsManagementErrors::PreprocessKeygenKmsNodeAlreadyResponded,
                            )
                    }
                    PreprocessKeygenKmsNodeAlreadyResponded
                },
                {
                    fn FheParamsNotInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FheParamsNotInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::FheParamsNotInitialized)
                    }
                    FheParamsNotInitialized
                },
                {
                    fn AddressEmptyCode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <AddressEmptyCode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::AddressEmptyCode)
                    }
                    AddressEmptyCode
                },
                {
                    fn UUPSUnsupportedProxiableUUID(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::UUPSUnsupportedProxiableUUID)
                    }
                    UUPSUnsupportedProxiableUUID
                },
                {
                    fn ERC1967NonPayable(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ERC1967NonPayable as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::ERC1967NonPayable)
                    }
                    ERC1967NonPayable
                },
                {
                    fn FheParamsAlreadyInitialized(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::FheParamsAlreadyInitialized)
                    }
                    FheParamsAlreadyInitialized
                },
                {
                    fn KskgenPreprocessingRequired(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenPreprocessingRequired as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KskgenPreprocessingRequired)
                    }
                    KskgenPreprocessingRequired
                },
                {
                    fn KeygenPreprocessingRequired(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KeygenPreprocessingRequired as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KeygenPreprocessingRequired)
                    }
                    KeygenPreprocessingRequired
                },
                {
                    fn ActivateKeyKmsNodeAlreadyResponded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::ActivateKeyKmsNodeAlreadyResponded)
                    }
                    ActivateKeyKmsNodeAlreadyResponded
                },
                {
                    fn KskgenKmsNodeAlreadyResponded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KskgenKmsNodeAlreadyResponded)
                    }
                    KskgenKmsNodeAlreadyResponded
                },
                {
                    fn FailedCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <FailedCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::FailedCall)
                    }
                    FailedCall
                },
                {
                    fn KskgenSameSrcAndDestKeyIds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::KskgenSameSrcAndDestKeyIds)
                    }
                    KskgenSameSrcAndDestKeyIds
                },
                {
                    fn NotInitializing(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <NotInitializing as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::NotInitializing)
                    }
                    NotInitializing
                },
                {
                    fn UUPSUnauthorizedCallContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::UUPSUnauthorizedCallContext)
                    }
                    UUPSUnauthorizedCallContext
                },
                {
                    fn ActivateKeyRequiresKeygen(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequiresKeygen)
                    }
                    ActivateKeyRequiresKeygen
                },
                {
                    fn ActivateKeyRequiresKskgen(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::ActivateKeyRequiresKskgen)
                    }
                    ActivateKeyRequiresKskgen
                },
                {
                    fn CrsgenKmsNodeAlreadyResponded(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::CrsgenKmsNodeAlreadyResponded)
                    }
                    CrsgenKmsNodeAlreadyResponded
                },
                {
                    fn InvalidInitialization(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<KmsManagementErrors> {
                        <InvalidInitialization as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(KmsManagementErrors::InvalidInitialization)
                    }
                    InvalidInitialization
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ActivateKeyKmsNodeAlreadyResponded(inner) => {
                    <ActivateKeyKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ActivateKeyRequestAlreadySent(inner) => {
                    <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ActivateKeyRequiresKeygen(inner) => {
                    <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ActivateKeyRequiresKskgen(inner) => {
                    <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::CrsgenKmsNodeAlreadyResponded(inner) => {
                    <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FheParamsAlreadyInitialized(inner) => {
                    <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FheParamsNotInitialized(inner) => {
                    <FheParamsNotInitialized as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KeygenKmsNodeAlreadyResponded(inner) => {
                    <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KeygenPreprocessingRequired(inner) => {
                    <KeygenPreprocessingRequired as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KeygenRequestAlreadySent(inner) => {
                    <KeygenRequestAlreadySent as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenDestKeyNotGenerated(inner) => {
                    <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenKmsNodeAlreadyResponded(inner) => {
                    <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenPreprocessingRequired(inner) => {
                    <KskgenPreprocessingRequired as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenRequestAlreadySent(inner) => {
                    <KskgenRequestAlreadySent as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenSameSrcAndDestKeyIds(inner) => {
                    <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::KskgenSourceKeyNotGenerated(inner) => {
                    <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PreprocessKeygenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::PreprocessKskgenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ActivateKeyKmsNodeAlreadyResponded(inner) => {
                    <ActivateKeyKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ActivateKeyRequestAlreadySent(inner) => {
                    <ActivateKeyRequestAlreadySent as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ActivateKeyRequiresKeygen(inner) => {
                    <ActivateKeyRequiresKeygen as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ActivateKeyRequiresKskgen(inner) => {
                    <ActivateKeyRequiresKskgen as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::AddressEmptyCode(inner) => {
                    <AddressEmptyCode as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::CrsgenKmsNodeAlreadyResponded(inner) => {
                    <CrsgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967InvalidImplementation(inner) => {
                    <ERC1967InvalidImplementation as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1967NonPayable(inner) => {
                    <ERC1967NonPayable as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FailedCall(inner) => {
                    <FailedCall as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::FheParamsAlreadyInitialized(inner) => {
                    <FheParamsAlreadyInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FheParamsNotInitialized(inner) => {
                    <FheParamsNotInitialized as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidInitialization(inner) => {
                    <InvalidInitialization as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KeygenKmsNodeAlreadyResponded(inner) => {
                    <KeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KeygenPreprocessingRequired(inner) => {
                    <KeygenPreprocessingRequired as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KeygenRequestAlreadySent(inner) => {
                    <KeygenRequestAlreadySent as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenDestKeyNotGenerated(inner) => {
                    <KskgenDestKeyNotGenerated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenKmsNodeAlreadyResponded(inner) => {
                    <KskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenPreprocessingRequired(inner) => {
                    <KskgenPreprocessingRequired as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenRequestAlreadySent(inner) => {
                    <KskgenRequestAlreadySent as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenSameSrcAndDestKeyIds(inner) => {
                    <KskgenSameSrcAndDestKeyIds as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::KskgenSourceKeyNotGenerated(inner) => {
                    <KskgenSourceKeyNotGenerated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotInitializing(inner) => {
                    <NotInitializing as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PreprocessKeygenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKeygenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::PreprocessKskgenKmsNodeAlreadyResponded(inner) => {
                    <PreprocessKskgenKmsNodeAlreadyResponded as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnauthorizedCallContext(inner) => {
                    <UUPSUnauthorizedCallContext as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::UUPSUnsupportedProxiableUUID(inner) => {
                    <UUPSUnsupportedProxiableUUID as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`KmsManagement`](self) events.
    pub enum KmsManagementEvents {
        #[allow(missing_docs)]
        ActivateKeyRequest(ActivateKeyRequest),
        #[allow(missing_docs)]
        ActivateKeyResponse(ActivateKeyResponse),
        #[allow(missing_docs)]
        AddFheParams(AddFheParams),
        #[allow(missing_docs)]
        CrsgenRequest(CrsgenRequest),
        #[allow(missing_docs)]
        CrsgenResponse(CrsgenResponse),
        #[allow(missing_docs)]
        Initialized(Initialized),
        #[allow(missing_docs)]
        KeygenRequest(KeygenRequest),
        #[allow(missing_docs)]
        KeygenResponse(KeygenResponse),
        #[allow(missing_docs)]
        KskgenRequest(KskgenRequest),
        #[allow(missing_docs)]
        KskgenResponse(KskgenResponse),
        #[allow(missing_docs)]
        OwnershipTransferStarted(OwnershipTransferStarted),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        PreprocessKeygenRequest(PreprocessKeygenRequest),
        #[allow(missing_docs)]
        PreprocessKeygenResponse(PreprocessKeygenResponse),
        #[allow(missing_docs)]
        PreprocessKskgenRequest(PreprocessKskgenRequest),
        #[allow(missing_docs)]
        PreprocessKskgenResponse(PreprocessKskgenResponse),
        #[allow(missing_docs)]
        UpdateFheParams(UpdateFheParams),
        #[allow(missing_docs)]
        Upgraded(Upgraded),
    }
    #[automatically_derived]
    impl KmsManagementEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                4u8,
                247u8,
                182u8,
                174u8,
                34u8,
                46u8,
                244u8,
                114u8,
                137u8,
                207u8,
                220u8,
                124u8,
                59u8,
                130u8,
                152u8,
                39u8,
                62u8,
                27u8,
                201u8,
                46u8,
                235u8,
                52u8,
                110u8,
                128u8,
                81u8,
                99u8,
                237u8,
                75u8,
                55u8,
                231u8,
                107u8,
                41u8,
            ],
            [
                56u8,
                209u8,
                107u8,
                140u8,
                172u8,
                34u8,
                217u8,
                159u8,
                199u8,
                193u8,
                36u8,
                185u8,
                205u8,
                13u8,
                226u8,
                211u8,
                250u8,
                31u8,
                174u8,
                244u8,
                32u8,
                191u8,
                231u8,
                145u8,
                216u8,
                195u8,
                98u8,
                215u8,
                101u8,
                226u8,
                39u8,
                0u8,
            ],
            [
                65u8,
                135u8,
                1u8,
                30u8,
                89u8,
                23u8,
                22u8,
                148u8,
                135u8,
                46u8,
                8u8,
                179u8,
                211u8,
                205u8,
                211u8,
                201u8,
                1u8,
                86u8,
                122u8,
                160u8,
                227u8,
                138u8,
                170u8,
                109u8,
                187u8,
                67u8,
                104u8,
                131u8,
                124u8,
                30u8,
                142u8,
                52u8,
            ],
            [
                89u8,
                109u8,
                17u8,
                30u8,
                117u8,
                18u8,
                164u8,
                126u8,
                224u8,
                197u8,
                235u8,
                102u8,
                238u8,
                246u8,
                242u8,
                44u8,
                69u8,
                216u8,
                173u8,
                79u8,
                238u8,
                5u8,
                32u8,
                52u8,
                7u8,
                133u8,
                161u8,
                30u8,
                34u8,
                30u8,
                213u8,
                18u8,
            ],
            [
                112u8,
                102u8,
                150u8,
                51u8,
                121u8,
                240u8,
                100u8,
                138u8,
                100u8,
                117u8,
                134u8,
                13u8,
                228u8,
                68u8,
                122u8,
                236u8,
                11u8,
                4u8,
                192u8,
                61u8,
                181u8,
                188u8,
                22u8,
                155u8,
                64u8,
                28u8,
                136u8,
                209u8,
                111u8,
                246u8,
                87u8,
                141u8,
            ],
            [
                118u8,
                134u8,
                53u8,
                69u8,
                115u8,
                92u8,
                41u8,
                207u8,
                28u8,
                126u8,
                187u8,
                0u8,
                40u8,
                231u8,
                52u8,
                209u8,
                215u8,
                56u8,
                210u8,
                165u8,
                208u8,
                153u8,
                186u8,
                139u8,
                82u8,
                156u8,
                23u8,
                147u8,
                53u8,
                74u8,
                227u8,
                18u8,
            ],
            [
                121u8,
                100u8,
                130u8,
                214u8,
                0u8,
                9u8,
                168u8,
                3u8,
                49u8,
                82u8,
                154u8,
                251u8,
                72u8,
                191u8,
                52u8,
                21u8,
                161u8,
                108u8,
                159u8,
                245u8,
                57u8,
                168u8,
                205u8,
                19u8,
                142u8,
                119u8,
                167u8,
                69u8,
                175u8,
                108u8,
                123u8,
                120u8,
            ],
            [
                133u8,
                17u8,
                51u8,
                122u8,
                216u8,
                156u8,
                32u8,
                239u8,
                144u8,
                79u8,
                19u8,
                233u8,
                185u8,
                231u8,
                235u8,
                5u8,
                244u8,
                192u8,
                255u8,
                241u8,
                40u8,
                168u8,
                118u8,
                12u8,
                44u8,
                29u8,
                67u8,
                108u8,
                17u8,
                27u8,
                48u8,
                159u8,
            ],
            [
                139u8,
                224u8,
                7u8,
                156u8,
                83u8,
                22u8,
                89u8,
                20u8,
                19u8,
                68u8,
                205u8,
                31u8,
                208u8,
                164u8,
                242u8,
                132u8,
                25u8,
                73u8,
                127u8,
                151u8,
                34u8,
                163u8,
                218u8,
                175u8,
                227u8,
                180u8,
                24u8,
                111u8,
                107u8,
                100u8,
                87u8,
                224u8,
            ],
            [
                149u8,
                193u8,
                35u8,
                174u8,
                62u8,
                99u8,
                87u8,
                50u8,
                49u8,
                96u8,
                82u8,
                114u8,
                102u8,
                126u8,
                20u8,
                16u8,
                169u8,
                227u8,
                198u8,
                24u8,
                34u8,
                127u8,
                245u8,
                9u8,
                227u8,
                198u8,
                161u8,
                82u8,
                198u8,
                100u8,
                179u8,
                162u8,
            ],
            [
                188u8,
                124u8,
                215u8,
                90u8,
                32u8,
                238u8,
                39u8,
                253u8,
                154u8,
                222u8,
                186u8,
                179u8,
                32u8,
                65u8,
                247u8,
                85u8,
                33u8,
                77u8,
                188u8,
                107u8,
                255u8,
                169u8,
                12u8,
                192u8,
                34u8,
                91u8,
                57u8,
                218u8,
                46u8,
                92u8,
                45u8,
                59u8,
            ],
            [
                188u8,
                157u8,
                121u8,
                54u8,
                109u8,
                173u8,
                107u8,
                151u8,
                45u8,
                97u8,
                227u8,
                241u8,
                86u8,
                126u8,
                226u8,
                241u8,
                226u8,
                76u8,
                12u8,
                225u8,
                12u8,
                114u8,
                220u8,
                251u8,
                20u8,
                82u8,
                238u8,
                59u8,
                53u8,
                200u8,
                209u8,
                62u8,
            ],
            [
                189u8,
                220u8,
                22u8,
                98u8,
                205u8,
                170u8,
                135u8,
                26u8,
                228u8,
                13u8,
                158u8,
                220u8,
                14u8,
                67u8,
                94u8,
                9u8,
                136u8,
                198u8,
                9u8,
                91u8,
                252u8,
                124u8,
                69u8,
                42u8,
                237u8,
                177u8,
                108u8,
                137u8,
                96u8,
                107u8,
                107u8,
                117u8,
            ],
            [
                198u8,
                7u8,
                209u8,
                105u8,
                88u8,
                64u8,
                206u8,
                13u8,
                201u8,
                210u8,
                74u8,
                84u8,
                126u8,
                218u8,
                236u8,
                72u8,
                94u8,
                1u8,
                229u8,
                147u8,
                154u8,
                84u8,
                12u8,
                46u8,
                76u8,
                35u8,
                227u8,
                96u8,
                226u8,
                36u8,
                55u8,
                103u8,
            ],
            [
                199u8,
                245u8,
                5u8,
                178u8,
                243u8,
                113u8,
                174u8,
                33u8,
                117u8,
                238u8,
                73u8,
                19u8,
                244u8,
                73u8,
                158u8,
                31u8,
                38u8,
                51u8,
                167u8,
                181u8,
                147u8,
                99u8,
                33u8,
                238u8,
                209u8,
                205u8,
                174u8,
                182u8,
                17u8,
                81u8,
                129u8,
                210u8,
            ],
            [
                230u8,
                61u8,
                186u8,
                20u8,
                186u8,
                33u8,
                108u8,
                67u8,
                239u8,
                189u8,
                110u8,
                2u8,
                6u8,
                205u8,
                33u8,
                114u8,
                164u8,
                166u8,
                79u8,
                137u8,
                76u8,
                143u8,
                175u8,
                0u8,
                70u8,
                145u8,
                170u8,
                111u8,
                136u8,
                254u8,
                202u8,
                218u8,
            ],
            [
                240u8,
                187u8,
                5u8,
                237u8,
                17u8,
                177u8,
                30u8,
                154u8,
                131u8,
                219u8,
                31u8,
                223u8,
                219u8,
                54u8,
                76u8,
                225u8,
                87u8,
                155u8,
                27u8,
                179u8,
                77u8,
                64u8,
                128u8,
                182u8,
                112u8,
                181u8,
                121u8,
                70u8,
                146u8,
                7u8,
                158u8,
                61u8,
            ],
            [
                253u8,
                104u8,
                87u8,
                64u8,
                62u8,
                173u8,
                189u8,
                192u8,
                200u8,
                182u8,
                139u8,
                21u8,
                27u8,
                180u8,
                106u8,
                49u8,
                214u8,
                195u8,
                82u8,
                175u8,
                121u8,
                176u8,
                101u8,
                212u8,
                114u8,
                203u8,
                215u8,
                119u8,
                129u8,
                81u8,
                77u8,
                212u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for KmsManagementEvents {
        const NAME: &'static str = "KmsManagementEvents";
        const COUNT: usize = 18usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <ActivateKeyRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateKeyRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ActivateKeyRequest)
                }
                Some(
                    <ActivateKeyResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <ActivateKeyResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ActivateKeyResponse)
                }
                Some(<AddFheParams as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <AddFheParams as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::AddFheParams)
                }
                Some(<CrsgenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrsgenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CrsgenRequest)
                }
                Some(<CrsgenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <CrsgenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::CrsgenResponse)
                }
                Some(<Initialized as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Initialized as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Initialized)
                }
                Some(<KeygenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeygenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::KeygenRequest)
                }
                Some(<KeygenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KeygenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::KeygenResponse)
                }
                Some(<KskgenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KskgenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::KskgenRequest)
                }
                Some(<KskgenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <KskgenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::KskgenResponse)
                }
                Some(
                    <OwnershipTransferStarted as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferStarted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferStarted)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <PreprocessKeygenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKeygenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PreprocessKeygenRequest)
                }
                Some(
                    <PreprocessKeygenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKeygenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PreprocessKeygenResponse)
                }
                Some(
                    <PreprocessKskgenRequest as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKskgenRequest as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PreprocessKskgenRequest)
                }
                Some(
                    <PreprocessKskgenResponse as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <PreprocessKskgenResponse as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PreprocessKskgenResponse)
                }
                Some(<UpdateFheParams as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <UpdateFheParams as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::UpdateFheParams)
                }
                Some(<Upgraded as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Upgraded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Upgraded)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for KmsManagementEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateKeyRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ActivateKeyResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::AddFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrsgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::CrsgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::KskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferStarted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::PreprocessKskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::UpdateFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ActivateKeyRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ActivateKeyResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::AddFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrsgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::CrsgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Initialized(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::KskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferStarted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKeygenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKeygenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKskgenRequest(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::PreprocessKskgenResponse(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::UpdateFheParams(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Upgraded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`KmsManagement`](self) contract instance.

See the [wrapper's documentation](`KmsManagementInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> KmsManagementInstance<T, P, N> {
        KmsManagementInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<KmsManagementInstance<T, P, N>>,
    > {
        KmsManagementInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        KmsManagementInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`KmsManagement`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`KmsManagement`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct KmsManagementInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for KmsManagementInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("KmsManagementInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > KmsManagementInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`KmsManagement`](self) contract instance.

See the [wrapper's documentation](`KmsManagementInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<KmsManagementInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> KmsManagementInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> KmsManagementInstance<T, P, N> {
            KmsManagementInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > KmsManagementInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`UPGRADE_INTERFACE_VERSION`] function.
        pub fn UPGRADE_INTERFACE_VERSION(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, UPGRADE_INTERFACE_VERSIONCall, N> {
            self.call_builder(&UPGRADE_INTERFACE_VERSIONCall {})
        }
        ///Creates a new call builder for the [`acceptOwnership`] function.
        pub fn acceptOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, acceptOwnershipCall, N> {
            self.call_builder(&acceptOwnershipCall {})
        }
        ///Creates a new call builder for the [`activateKeyRequest`] function.
        pub fn activateKeyRequest(
            &self,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, activateKeyRequestCall, N> {
            self.call_builder(&activateKeyRequestCall { keyId })
        }
        ///Creates a new call builder for the [`activateKeyResponse`] function.
        pub fn activateKeyResponse(
            &self,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, activateKeyResponseCall, N> {
            self.call_builder(&activateKeyResponseCall { keyId })
        }
        ///Creates a new call builder for the [`activatedKeyIds`] function.
        pub fn activatedKeyIds(
            &self,
            index: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, activatedKeyIdsCall, N> {
            self.call_builder(&activatedKeyIdsCall { index })
        }
        ///Creates a new call builder for the [`addFheParams`] function.
        pub fn addFheParams(
            &self,
            fheParamsName: alloy::sol_types::private::String,
            fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, addFheParamsCall, N> {
            self.call_builder(
                &addFheParamsCall {
                    fheParamsName,
                    fheParamsDigest,
                },
            )
        }
        ///Creates a new call builder for the [`crsFheParamsDigests`] function.
        pub fn crsFheParamsDigests(
            &self,
            crsId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, crsFheParamsDigestsCall, N> {
            self.call_builder(&crsFheParamsDigestsCall { crsId })
        }
        ///Creates a new call builder for the [`crsgenRequest`] function.
        pub fn crsgenRequest(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, crsgenRequestCall, N> {
            self.call_builder(&crsgenRequestCall { fheParamsName })
        }
        ///Creates a new call builder for the [`crsgenResponse`] function.
        pub fn crsgenResponse(
            &self,
            crsgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
            crsId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, crsgenResponseCall, N> {
            self.call_builder(
                &crsgenResponseCall {
                    crsgenRequestId,
                    crsId,
                },
            )
        }
        ///Creates a new call builder for the [`fheParamsDigests`] function.
        pub fn fheParamsDigests(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, fheParamsDigestsCall, N> {
            self.call_builder(
                &fheParamsDigestsCall {
                    fheParamsName,
                },
            )
        }
        ///Creates a new call builder for the [`getCurrentKeyId`] function.
        pub fn getCurrentKeyId(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCurrentKeyIdCall, N> {
            self.call_builder(&getCurrentKeyIdCall {})
        }
        ///Creates a new call builder for the [`getVersion`] function.
        pub fn getVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, getVersionCall, N> {
            self.call_builder(&getVersionCall {})
        }
        ///Creates a new call builder for the [`initialize`] function.
        pub fn initialize(
            &self,
            fheParamsName: alloy::sol_types::private::String,
            fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, initializeCall, N> {
            self.call_builder(
                &initializeCall {
                    fheParamsName,
                    fheParamsDigest,
                },
            )
        }
        ///Creates a new call builder for the [`isCurrentKeyId`] function.
        pub fn isCurrentKeyId(
            &self,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, isCurrentKeyIdCall, N> {
            self.call_builder(&isCurrentKeyIdCall { keyId })
        }
        ///Creates a new call builder for the [`keyFheParamsDigests`] function.
        pub fn keyFheParamsDigests(
            &self,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, keyFheParamsDigestsCall, N> {
            self.call_builder(&keyFheParamsDigestsCall { keyId })
        }
        ///Creates a new call builder for the [`keygenRequest`] function.
        pub fn keygenRequest(
            &self,
            preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, keygenRequestCall, N> {
            self.call_builder(&keygenRequestCall { preKeyId })
        }
        ///Creates a new call builder for the [`keygenResponse`] function.
        pub fn keygenResponse(
            &self,
            preKeyId: alloy::sol_types::private::primitives::aliases::U256,
            keyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, keygenResponseCall, N> {
            self.call_builder(
                &keygenResponseCall {
                    preKeyId,
                    keyId,
                },
            )
        }
        ///Creates a new call builder for the [`kskFheParamsDigests`] function.
        pub fn kskFheParamsDigests(
            &self,
            kskId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, kskFheParamsDigestsCall, N> {
            self.call_builder(&kskFheParamsDigestsCall { kskId })
        }
        ///Creates a new call builder for the [`kskgenRequest`] function.
        pub fn kskgenRequest(
            &self,
            preKskId: alloy::sol_types::private::primitives::aliases::U256,
            sourceKeyId: alloy::sol_types::private::primitives::aliases::U256,
            destKeyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, kskgenRequestCall, N> {
            self.call_builder(
                &kskgenRequestCall {
                    preKskId,
                    sourceKeyId,
                    destKeyId,
                },
            )
        }
        ///Creates a new call builder for the [`kskgenResponse`] function.
        pub fn kskgenResponse(
            &self,
            preKskId: alloy::sol_types::private::primitives::aliases::U256,
            kskId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, kskgenResponseCall, N> {
            self.call_builder(
                &kskgenResponseCall {
                    preKskId,
                    kskId,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`pendingOwner`] function.
        pub fn pendingOwner(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, pendingOwnerCall, N> {
            self.call_builder(&pendingOwnerCall {})
        }
        ///Creates a new call builder for the [`preprocessKeygenRequest`] function.
        pub fn preprocessKeygenRequest(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, preprocessKeygenRequestCall, N> {
            self.call_builder(
                &preprocessKeygenRequestCall {
                    fheParamsName,
                },
            )
        }
        ///Creates a new call builder for the [`preprocessKeygenResponse`] function.
        pub fn preprocessKeygenResponse(
            &self,
            preKeygenRequestId: alloy::sol_types::private::primitives::aliases::U256,
            preKeyId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, preprocessKeygenResponseCall, N> {
            self.call_builder(
                &preprocessKeygenResponseCall {
                    preKeygenRequestId,
                    preKeyId,
                },
            )
        }
        ///Creates a new call builder for the [`preprocessKskgenRequest`] function.
        pub fn preprocessKskgenRequest(
            &self,
            fheParamsName: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, preprocessKskgenRequestCall, N> {
            self.call_builder(
                &preprocessKskgenRequestCall {
                    fheParamsName,
                },
            )
        }
        ///Creates a new call builder for the [`preprocessKskgenResponse`] function.
        pub fn preprocessKskgenResponse(
            &self,
            preKskgenRequestId: alloy::sol_types::private::primitives::aliases::U256,
            preKskId: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, preprocessKskgenResponseCall, N> {
            self.call_builder(
                &preprocessKskgenResponseCall {
                    preKskgenRequestId,
                    preKskId,
                },
            )
        }
        ///Creates a new call builder for the [`proxiableUUID`] function.
        pub fn proxiableUUID(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proxiableUUIDCall, N> {
            self.call_builder(&proxiableUUIDCall {})
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall {})
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateFheParams`] function.
        pub fn updateFheParams(
            &self,
            fheParamsName: alloy::sol_types::private::String,
            fheParamsDigest: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, updateFheParamsCall, N> {
            self.call_builder(
                &updateFheParamsCall {
                    fheParamsName,
                    fheParamsDigest,
                },
            )
        }
        ///Creates a new call builder for the [`upgradeToAndCall`] function.
        pub fn upgradeToAndCall(
            &self,
            newImplementation: alloy::sol_types::private::Address,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, upgradeToAndCallCall, N> {
            self.call_builder(
                &upgradeToAndCallCall {
                    newImplementation,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > KmsManagementInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ActivateKeyRequest`] event.
        pub fn ActivateKeyRequest_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ActivateKeyRequest, N> {
            self.event_filter::<ActivateKeyRequest>()
        }
        ///Creates a new event filter for the [`ActivateKeyResponse`] event.
        pub fn ActivateKeyResponse_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ActivateKeyResponse, N> {
            self.event_filter::<ActivateKeyResponse>()
        }
        ///Creates a new event filter for the [`AddFheParams`] event.
        pub fn AddFheParams_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, AddFheParams, N> {
            self.event_filter::<AddFheParams>()
        }
        ///Creates a new event filter for the [`CrsgenRequest`] event.
        pub fn CrsgenRequest_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CrsgenRequest, N> {
            self.event_filter::<CrsgenRequest>()
        }
        ///Creates a new event filter for the [`CrsgenResponse`] event.
        pub fn CrsgenResponse_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, CrsgenResponse, N> {
            self.event_filter::<CrsgenResponse>()
        }
        ///Creates a new event filter for the [`Initialized`] event.
        pub fn Initialized_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, Initialized, N> {
            self.event_filter::<Initialized>()
        }
        ///Creates a new event filter for the [`KeygenRequest`] event.
        pub fn KeygenRequest_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, KeygenRequest, N> {
            self.event_filter::<KeygenRequest>()
        }
        ///Creates a new event filter for the [`KeygenResponse`] event.
        pub fn KeygenResponse_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, KeygenResponse, N> {
            self.event_filter::<KeygenResponse>()
        }
        ///Creates a new event filter for the [`KskgenRequest`] event.
        pub fn KskgenRequest_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, KskgenRequest, N> {
            self.event_filter::<KskgenRequest>()
        }
        ///Creates a new event filter for the [`KskgenResponse`] event.
        pub fn KskgenResponse_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, KskgenResponse, N> {
            self.event_filter::<KskgenResponse>()
        }
        ///Creates a new event filter for the [`OwnershipTransferStarted`] event.
        pub fn OwnershipTransferStarted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferStarted, N> {
            self.event_filter::<OwnershipTransferStarted>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`PreprocessKeygenRequest`] event.
        pub fn PreprocessKeygenRequest_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PreprocessKeygenRequest, N> {
            self.event_filter::<PreprocessKeygenRequest>()
        }
        ///Creates a new event filter for the [`PreprocessKeygenResponse`] event.
        pub fn PreprocessKeygenResponse_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PreprocessKeygenResponse, N> {
            self.event_filter::<PreprocessKeygenResponse>()
        }
        ///Creates a new event filter for the [`PreprocessKskgenRequest`] event.
        pub fn PreprocessKskgenRequest_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PreprocessKskgenRequest, N> {
            self.event_filter::<PreprocessKskgenRequest>()
        }
        ///Creates a new event filter for the [`PreprocessKskgenResponse`] event.
        pub fn PreprocessKskgenResponse_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PreprocessKskgenResponse, N> {
            self.event_filter::<PreprocessKskgenResponse>()
        }
        ///Creates a new event filter for the [`UpdateFheParams`] event.
        pub fn UpdateFheParams_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, UpdateFheParams, N> {
            self.event_filter::<UpdateFheParams>()
        }
        ///Creates a new event filter for the [`Upgraded`] event.
        pub fn Upgraded_filter(&self) -> alloy_contract::Event<T, &P, Upgraded, N> {
            self.event_filter::<Upgraded>()
        }
    }
}
